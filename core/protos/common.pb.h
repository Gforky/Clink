// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace perception_feature {
namespace proto {
class BoolList;
class BoolListDefaultTypeInternal;
extern BoolListDefaultTypeInternal _BoolList_default_instance_;
class BytesList;
class BytesListDefaultTypeInternal;
extern BytesListDefaultTypeInternal _BytesList_default_instance_;
class DoubleList;
class DoubleListDefaultTypeInternal;
extern DoubleListDefaultTypeInternal _DoubleList_default_instance_;
class FloatList;
class FloatListDefaultTypeInternal;
extern FloatListDefaultTypeInternal _FloatList_default_instance_;
class IVRecordEntry;
class IVRecordEntryDefaultTypeInternal;
extern IVRecordEntryDefaultTypeInternal _IVRecordEntry_default_instance_;
class IVRecordList;
class IVRecordListDefaultTypeInternal;
extern IVRecordListDefaultTypeInternal _IVRecordList_default_instance_;
class Int64List;
class Int64ListDefaultTypeInternal;
extern Int64ListDefaultTypeInternal _Int64List_default_instance_;
class IntList;
class IntListDefaultTypeInternal;
extern IntListDefaultTypeInternal _IntList_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class RecordEntry;
class RecordEntryDefaultTypeInternal;
extern RecordEntryDefaultTypeInternal _RecordEntry_default_instance_;
}  // namespace proto
}  // namespace perception_feature
PROTOBUF_NAMESPACE_OPEN
template<> ::perception_feature::proto::BoolList* Arena::CreateMaybeMessage<::perception_feature::proto::BoolList>(Arena*);
template<> ::perception_feature::proto::BytesList* Arena::CreateMaybeMessage<::perception_feature::proto::BytesList>(Arena*);
template<> ::perception_feature::proto::DoubleList* Arena::CreateMaybeMessage<::perception_feature::proto::DoubleList>(Arena*);
template<> ::perception_feature::proto::FloatList* Arena::CreateMaybeMessage<::perception_feature::proto::FloatList>(Arena*);
template<> ::perception_feature::proto::IVRecordEntry* Arena::CreateMaybeMessage<::perception_feature::proto::IVRecordEntry>(Arena*);
template<> ::perception_feature::proto::IVRecordList* Arena::CreateMaybeMessage<::perception_feature::proto::IVRecordList>(Arena*);
template<> ::perception_feature::proto::Int64List* Arena::CreateMaybeMessage<::perception_feature::proto::Int64List>(Arena*);
template<> ::perception_feature::proto::IntList* Arena::CreateMaybeMessage<::perception_feature::proto::IntList>(Arena*);
template<> ::perception_feature::proto::Record* Arena::CreateMaybeMessage<::perception_feature::proto::Record>(Arena*);
template<> ::perception_feature::proto::RecordEntry* Arena::CreateMaybeMessage<::perception_feature::proto::RecordEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception_feature {
namespace proto {

enum OutputFormat : int {
  OUT_RESERVED = 0,
  OUT_LIBSVM = 1,
  OUT_CSV = 2,
  OUT_KV = 3,
  OUT_IV = 4,
  OutputFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OutputFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OutputFormat_IsValid(int value);
constexpr OutputFormat OutputFormat_MIN = OUT_RESERVED;
constexpr OutputFormat OutputFormat_MAX = OUT_IV;
constexpr int OutputFormat_ARRAYSIZE = OutputFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputFormat_descriptor();
template<typename T>
inline const std::string& OutputFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OutputFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OutputFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OutputFormat_descriptor(), enum_t_value);
}
inline bool OutputFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OutputFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OutputFormat>(
    OutputFormat_descriptor(), name, value);
}
enum FeatureType : int {
  TYPE_RESERVED = 0,
  CONTINUOUS = 1,
  DISCRETE = 2,
  VECTOR = 3,
  FeatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FeatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FeatureType_IsValid(int value);
constexpr FeatureType FeatureType_MIN = TYPE_RESERVED;
constexpr FeatureType FeatureType_MAX = VECTOR;
constexpr int FeatureType_ARRAYSIZE = FeatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeatureType_descriptor();
template<typename T>
inline const std::string& FeatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FeatureType_descriptor(), enum_t_value);
}
inline bool FeatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FeatureType>(
    FeatureType_descriptor(), name, value);
}
// ===================================================================

class BytesList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.BytesList) */ {
 public:
  inline BytesList() : BytesList(nullptr) {}
  virtual ~BytesList();

  BytesList(const BytesList& from);
  BytesList(BytesList&& from) noexcept
    : BytesList() {
    *this = ::std::move(from);
  }

  inline BytesList& operator=(const BytesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BytesList& operator=(BytesList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BytesList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BytesList* internal_default_instance() {
    return reinterpret_cast<const BytesList*>(
               &_BytesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BytesList& a, BytesList& b) {
    a.Swap(&b);
  }
  inline void Swap(BytesList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BytesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BytesList* New() const final {
    return CreateMaybeMessage<BytesList>(nullptr);
  }

  BytesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BytesList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BytesList& from);
  void MergeFrom(const BytesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytesList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.BytesList";
  }
  protected:
  explicit BytesList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated bytes value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const void* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.BytesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FloatList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.FloatList) */ {
 public:
  inline FloatList() : FloatList(nullptr) {}
  virtual ~FloatList();

  FloatList(const FloatList& from);
  FloatList(FloatList&& from) noexcept
    : FloatList() {
    *this = ::std::move(from);
  }

  inline FloatList& operator=(const FloatList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatList& operator=(FloatList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatList* internal_default_instance() {
    return reinterpret_cast<const FloatList*>(
               &_FloatList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FloatList& a, FloatList& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatList* New() const final {
    return CreateMaybeMessage<FloatList>(nullptr);
  }

  FloatList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatList& from);
  void MergeFrom(const FloatList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.FloatList";
  }
  protected:
  explicit FloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated float value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:perception_feature.proto.FloatList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DoubleList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.DoubleList) */ {
 public:
  inline DoubleList() : DoubleList(nullptr) {}
  virtual ~DoubleList();

  DoubleList(const DoubleList& from);
  DoubleList(DoubleList&& from) noexcept
    : DoubleList() {
    *this = ::std::move(from);
  }

  inline DoubleList& operator=(const DoubleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleList& operator=(DoubleList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleList* internal_default_instance() {
    return reinterpret_cast<const DoubleList*>(
               &_DoubleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DoubleList& a, DoubleList& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleList* New() const final {
    return CreateMaybeMessage<DoubleList>(nullptr);
  }

  DoubleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleList& from);
  void MergeFrom(const DoubleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.DoubleList";
  }
  protected:
  explicit DoubleList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated double value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:perception_feature.proto.DoubleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Int64List PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.Int64List) */ {
 public:
  inline Int64List() : Int64List(nullptr) {}
  virtual ~Int64List();

  Int64List(const Int64List& from);
  Int64List(Int64List&& from) noexcept
    : Int64List() {
    *this = ::std::move(from);
  }

  inline Int64List& operator=(const Int64List& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64List& operator=(Int64List&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Int64List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int64List* internal_default_instance() {
    return reinterpret_cast<const Int64List*>(
               &_Int64List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Int64List& a, Int64List& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64List* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64List* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int64List* New() const final {
    return CreateMaybeMessage<Int64List>(nullptr);
  }

  Int64List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int64List>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Int64List& from);
  void MergeFrom(const Int64List& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64List* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.Int64List";
  }
  protected:
  explicit Int64List(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated int64 value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:perception_feature.proto.Int64List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class IntList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.IntList) */ {
 public:
  inline IntList() : IntList(nullptr) {}
  virtual ~IntList();

  IntList(const IntList& from);
  IntList(IntList&& from) noexcept
    : IntList() {
    *this = ::std::move(from);
  }

  inline IntList& operator=(const IntList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntList& operator=(IntList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntList* internal_default_instance() {
    return reinterpret_cast<const IntList*>(
               &_IntList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IntList& a, IntList& b) {
    a.Swap(&b);
  }
  inline void Swap(IntList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntList* New() const final {
    return CreateMaybeMessage<IntList>(nullptr);
  }

  IntList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntList& from);
  void MergeFrom(const IntList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.IntList";
  }
  protected:
  explicit IntList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated int32 value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:perception_feature.proto.IntList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BoolList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.BoolList) */ {
 public:
  inline BoolList() : BoolList(nullptr) {}
  virtual ~BoolList();

  BoolList(const BoolList& from);
  BoolList(BoolList&& from) noexcept
    : BoolList() {
    *this = ::std::move(from);
  }

  inline BoolList& operator=(const BoolList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolList& operator=(BoolList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolList* internal_default_instance() {
    return reinterpret_cast<const BoolList*>(
               &_BoolList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BoolList& a, BoolList& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolList* New() const final {
    return CreateMaybeMessage<BoolList>(nullptr);
  }

  BoolList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolList& from);
  void MergeFrom(const BoolList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.BoolList";
  }
  protected:
  explicit BoolList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated bool value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  bool _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_value() const;
  void _internal_add_value(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_value();
  public:
  bool value(int index) const;
  void set_value(int index, bool value);
  void add_value(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:perception_feature.proto.BoolList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Record PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  virtual ~Record();

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Record& default_instance();

  enum KindCase {
    kBytesList = 1,
    kBoolList = 2,
    kIntList = 3,
    kInt64List = 4,
    kFloatList = 5,
    kDoubleList = 6,
    kIvList = 7,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(nullptr);
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.Record";
  }
  protected:
  explicit Record(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesListFieldNumber = 1,
    kBoolListFieldNumber = 2,
    kIntListFieldNumber = 3,
    kInt64ListFieldNumber = 4,
    kFloatListFieldNumber = 5,
    kDoubleListFieldNumber = 6,
    kIvListFieldNumber = 7,
  };
  // .perception_feature.proto.BytesList bytes_list = 1;
  bool has_bytes_list() const;
  private:
  bool _internal_has_bytes_list() const;
  public:
  void clear_bytes_list();
  const ::perception_feature::proto::BytesList& bytes_list() const;
  ::perception_feature::proto::BytesList* release_bytes_list();
  ::perception_feature::proto::BytesList* mutable_bytes_list();
  void set_allocated_bytes_list(::perception_feature::proto::BytesList* bytes_list);
  private:
  const ::perception_feature::proto::BytesList& _internal_bytes_list() const;
  ::perception_feature::proto::BytesList* _internal_mutable_bytes_list();
  public:
  void unsafe_arena_set_allocated_bytes_list(
      ::perception_feature::proto::BytesList* bytes_list);
  ::perception_feature::proto::BytesList* unsafe_arena_release_bytes_list();

  // .perception_feature.proto.BoolList bool_list = 2;
  bool has_bool_list() const;
  private:
  bool _internal_has_bool_list() const;
  public:
  void clear_bool_list();
  const ::perception_feature::proto::BoolList& bool_list() const;
  ::perception_feature::proto::BoolList* release_bool_list();
  ::perception_feature::proto::BoolList* mutable_bool_list();
  void set_allocated_bool_list(::perception_feature::proto::BoolList* bool_list);
  private:
  const ::perception_feature::proto::BoolList& _internal_bool_list() const;
  ::perception_feature::proto::BoolList* _internal_mutable_bool_list();
  public:
  void unsafe_arena_set_allocated_bool_list(
      ::perception_feature::proto::BoolList* bool_list);
  ::perception_feature::proto::BoolList* unsafe_arena_release_bool_list();

  // .perception_feature.proto.IntList int_list = 3;
  bool has_int_list() const;
  private:
  bool _internal_has_int_list() const;
  public:
  void clear_int_list();
  const ::perception_feature::proto::IntList& int_list() const;
  ::perception_feature::proto::IntList* release_int_list();
  ::perception_feature::proto::IntList* mutable_int_list();
  void set_allocated_int_list(::perception_feature::proto::IntList* int_list);
  private:
  const ::perception_feature::proto::IntList& _internal_int_list() const;
  ::perception_feature::proto::IntList* _internal_mutable_int_list();
  public:
  void unsafe_arena_set_allocated_int_list(
      ::perception_feature::proto::IntList* int_list);
  ::perception_feature::proto::IntList* unsafe_arena_release_int_list();

  // .perception_feature.proto.Int64List int64_list = 4;
  bool has_int64_list() const;
  private:
  bool _internal_has_int64_list() const;
  public:
  void clear_int64_list();
  const ::perception_feature::proto::Int64List& int64_list() const;
  ::perception_feature::proto::Int64List* release_int64_list();
  ::perception_feature::proto::Int64List* mutable_int64_list();
  void set_allocated_int64_list(::perception_feature::proto::Int64List* int64_list);
  private:
  const ::perception_feature::proto::Int64List& _internal_int64_list() const;
  ::perception_feature::proto::Int64List* _internal_mutable_int64_list();
  public:
  void unsafe_arena_set_allocated_int64_list(
      ::perception_feature::proto::Int64List* int64_list);
  ::perception_feature::proto::Int64List* unsafe_arena_release_int64_list();

  // .perception_feature.proto.FloatList float_list = 5;
  bool has_float_list() const;
  private:
  bool _internal_has_float_list() const;
  public:
  void clear_float_list();
  const ::perception_feature::proto::FloatList& float_list() const;
  ::perception_feature::proto::FloatList* release_float_list();
  ::perception_feature::proto::FloatList* mutable_float_list();
  void set_allocated_float_list(::perception_feature::proto::FloatList* float_list);
  private:
  const ::perception_feature::proto::FloatList& _internal_float_list() const;
  ::perception_feature::proto::FloatList* _internal_mutable_float_list();
  public:
  void unsafe_arena_set_allocated_float_list(
      ::perception_feature::proto::FloatList* float_list);
  ::perception_feature::proto::FloatList* unsafe_arena_release_float_list();

  // .perception_feature.proto.DoubleList double_list = 6;
  bool has_double_list() const;
  private:
  bool _internal_has_double_list() const;
  public:
  void clear_double_list();
  const ::perception_feature::proto::DoubleList& double_list() const;
  ::perception_feature::proto::DoubleList* release_double_list();
  ::perception_feature::proto::DoubleList* mutable_double_list();
  void set_allocated_double_list(::perception_feature::proto::DoubleList* double_list);
  private:
  const ::perception_feature::proto::DoubleList& _internal_double_list() const;
  ::perception_feature::proto::DoubleList* _internal_mutable_double_list();
  public:
  void unsafe_arena_set_allocated_double_list(
      ::perception_feature::proto::DoubleList* double_list);
  ::perception_feature::proto::DoubleList* unsafe_arena_release_double_list();

  // .perception_feature.proto.IVRecordList iv_list = 7;
  bool has_iv_list() const;
  private:
  bool _internal_has_iv_list() const;
  public:
  void clear_iv_list();
  const ::perception_feature::proto::IVRecordList& iv_list() const;
  ::perception_feature::proto::IVRecordList* release_iv_list();
  ::perception_feature::proto::IVRecordList* mutable_iv_list();
  void set_allocated_iv_list(::perception_feature::proto::IVRecordList* iv_list);
  private:
  const ::perception_feature::proto::IVRecordList& _internal_iv_list() const;
  ::perception_feature::proto::IVRecordList* _internal_mutable_iv_list();
  public:
  void unsafe_arena_set_allocated_iv_list(
      ::perception_feature::proto::IVRecordList* iv_list);
  ::perception_feature::proto::IVRecordList* unsafe_arena_release_iv_list();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:perception_feature.proto.Record)
 private:
  class _Internal;
  void set_has_bytes_list();
  void set_has_bool_list();
  void set_has_int_list();
  void set_has_int64_list();
  void set_has_float_list();
  void set_has_double_list();
  void set_has_iv_list();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    KindUnion() {}
    ::perception_feature::proto::BytesList* bytes_list_;
    ::perception_feature::proto::BoolList* bool_list_;
    ::perception_feature::proto::IntList* int_list_;
    ::perception_feature::proto::Int64List* int64_list_;
    ::perception_feature::proto::FloatList* float_list_;
    ::perception_feature::proto::DoubleList* double_list_;
    ::perception_feature::proto::IVRecordList* iv_list_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RecordEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.RecordEntry) */ {
 public:
  inline RecordEntry() : RecordEntry(nullptr) {}
  virtual ~RecordEntry();

  RecordEntry(const RecordEntry& from);
  RecordEntry(RecordEntry&& from) noexcept
    : RecordEntry() {
    *this = ::std::move(from);
  }

  inline RecordEntry& operator=(const RecordEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordEntry& operator=(RecordEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordEntry* internal_default_instance() {
    return reinterpret_cast<const RecordEntry*>(
               &_RecordEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RecordEntry& a, RecordEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordEntry* New() const final {
    return CreateMaybeMessage<RecordEntry>(nullptr);
  }

  RecordEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordEntry& from);
  void MergeFrom(const RecordEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.RecordEntry";
  }
  protected:
  explicit RecordEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .perception_feature.proto.Record value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::perception_feature::proto::Record& value() const;
  ::perception_feature::proto::Record* release_value();
  ::perception_feature::proto::Record* mutable_value();
  void set_allocated_value(::perception_feature::proto::Record* value);
  private:
  const ::perception_feature::proto::Record& _internal_value() const;
  ::perception_feature::proto::Record* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::perception_feature::proto::Record* value);
  ::perception_feature::proto::Record* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:perception_feature.proto.RecordEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::perception_feature::proto::Record* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class IVRecordEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.IVRecordEntry) */ {
 public:
  inline IVRecordEntry() : IVRecordEntry(nullptr) {}
  virtual ~IVRecordEntry();

  IVRecordEntry(const IVRecordEntry& from);
  IVRecordEntry(IVRecordEntry&& from) noexcept
    : IVRecordEntry() {
    *this = ::std::move(from);
  }

  inline IVRecordEntry& operator=(const IVRecordEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline IVRecordEntry& operator=(IVRecordEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IVRecordEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IVRecordEntry* internal_default_instance() {
    return reinterpret_cast<const IVRecordEntry*>(
               &_IVRecordEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IVRecordEntry& a, IVRecordEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(IVRecordEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IVRecordEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IVRecordEntry* New() const final {
    return CreateMaybeMessage<IVRecordEntry>(nullptr);
  }

  IVRecordEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IVRecordEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IVRecordEntry& from);
  void MergeFrom(const IVRecordEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IVRecordEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.IVRecordEntry";
  }
  protected:
  explicit IVRecordEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .perception_feature.proto.Record value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::perception_feature::proto::Record& value() const;
  ::perception_feature::proto::Record* release_value();
  ::perception_feature::proto::Record* mutable_value();
  void set_allocated_value(::perception_feature::proto::Record* value);
  private:
  const ::perception_feature::proto::Record& _internal_value() const;
  ::perception_feature::proto::Record* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::perception_feature::proto::Record* value);
  ::perception_feature::proto::Record* unsafe_arena_release_value();

  // int64 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.IVRecordEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception_feature::proto::Record* value_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class IVRecordList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.IVRecordList) */ {
 public:
  inline IVRecordList() : IVRecordList(nullptr) {}
  virtual ~IVRecordList();

  IVRecordList(const IVRecordList& from);
  IVRecordList(IVRecordList&& from) noexcept
    : IVRecordList() {
    *this = ::std::move(from);
  }

  inline IVRecordList& operator=(const IVRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IVRecordList& operator=(IVRecordList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IVRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IVRecordList* internal_default_instance() {
    return reinterpret_cast<const IVRecordList*>(
               &_IVRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IVRecordList& a, IVRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(IVRecordList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IVRecordList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IVRecordList* New() const final {
    return CreateMaybeMessage<IVRecordList>(nullptr);
  }

  IVRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IVRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IVRecordList& from);
  void MergeFrom(const IVRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IVRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.IVRecordList";
  }
  protected:
  explicit IVRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIvRecordFieldNumber = 1,
  };
  // repeated .perception_feature.proto.IVRecordEntry iv_record = 1;
  int iv_record_size() const;
  private:
  int _internal_iv_record_size() const;
  public:
  void clear_iv_record();
  ::perception_feature::proto::IVRecordEntry* mutable_iv_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::IVRecordEntry >*
      mutable_iv_record();
  private:
  const ::perception_feature::proto::IVRecordEntry& _internal_iv_record(int index) const;
  ::perception_feature::proto::IVRecordEntry* _internal_add_iv_record();
  public:
  const ::perception_feature::proto::IVRecordEntry& iv_record(int index) const;
  ::perception_feature::proto::IVRecordEntry* add_iv_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::IVRecordEntry >&
      iv_record() const;

  // @@protoc_insertion_point(class_scope:perception_feature.proto.IVRecordList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::IVRecordEntry > iv_record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BytesList

// repeated bytes value = 1;
inline int BytesList::_internal_value_size() const {
  return value_.size();
}
inline int BytesList::value_size() const {
  return _internal_value_size();
}
inline void BytesList::clear_value() {
  value_.Clear();
}
inline std::string* BytesList::add_value() {
  // @@protoc_insertion_point(field_add_mutable:perception_feature.proto.BytesList.value)
  return _internal_add_value();
}
inline const std::string& BytesList::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& BytesList::value(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.BytesList.value)
  return _internal_value(index);
}
inline std::string* BytesList::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.BytesList.value)
  return value_.Mutable(index);
}
inline void BytesList::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perception_feature.proto.BytesList.value)
  value_.Mutable(index)->assign(value);
}
inline void BytesList::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perception_feature.proto.BytesList.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void BytesList::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.BytesList.value)
}
inline void BytesList::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.BytesList.value)
}
inline std::string* BytesList::_internal_add_value() {
  return value_.Add();
}
inline void BytesList::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.BytesList.value)
}
inline void BytesList::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perception_feature.proto.BytesList.value)
}
inline void BytesList::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perception_feature.proto.BytesList.value)
}
inline void BytesList::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perception_feature.proto.BytesList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BytesList::value() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.BytesList.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BytesList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.BytesList.value)
  return &value_;
}

// -------------------------------------------------------------------

// FloatList

// repeated float value = 1 [packed = true];
inline int FloatList::_internal_value_size() const {
  return value_.size();
}
inline int FloatList::value_size() const {
  return _internal_value_size();
}
inline void FloatList::clear_value() {
  value_.Clear();
}
inline float FloatList::_internal_value(int index) const {
  return value_.Get(index);
}
inline float FloatList::value(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FloatList.value)
  return _internal_value(index);
}
inline void FloatList::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.FloatList.value)
}
inline void FloatList::_internal_add_value(float value) {
  value_.Add(value);
}
inline void FloatList::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.FloatList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatList::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatList::value() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.FloatList.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatList::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.FloatList.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// DoubleList

// repeated double value = 1 [packed = true];
inline int DoubleList::_internal_value_size() const {
  return value_.size();
}
inline int DoubleList::value_size() const {
  return _internal_value_size();
}
inline void DoubleList::clear_value() {
  value_.Clear();
}
inline double DoubleList::_internal_value(int index) const {
  return value_.Get(index);
}
inline double DoubleList::value(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DoubleList.value)
  return _internal_value(index);
}
inline void DoubleList::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.DoubleList.value)
}
inline void DoubleList::_internal_add_value(double value) {
  value_.Add(value);
}
inline void DoubleList::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.DoubleList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleList::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleList::value() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.DoubleList.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleList::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.DoubleList.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// Int64List

// repeated int64 value = 1 [packed = true];
inline int Int64List::_internal_value_size() const {
  return value_.size();
}
inline int Int64List::value_size() const {
  return _internal_value_size();
}
inline void Int64List::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64List::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64List::value(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Int64List.value)
  return _internal_value(index);
}
inline void Int64List::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.Int64List.value)
}
inline void Int64List::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Add(value);
}
inline void Int64List::add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.Int64List.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64List::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64List::value() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.Int64List.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64List::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64List::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.Int64List.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// IntList

// repeated int32 value = 1 [packed = true];
inline int IntList::_internal_value_size() const {
  return value_.size();
}
inline int IntList::value_size() const {
  return _internal_value_size();
}
inline void IntList::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntList::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntList::value(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.IntList.value)
  return _internal_value(index);
}
inline void IntList::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.IntList.value)
}
inline void IntList::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
}
inline void IntList::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.IntList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntList::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntList::value() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.IntList.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntList::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.IntList.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// BoolList

// repeated bool value = 1 [packed = true];
inline int BoolList::_internal_value_size() const {
  return value_.size();
}
inline int BoolList::value_size() const {
  return _internal_value_size();
}
inline void BoolList::clear_value() {
  value_.Clear();
}
inline bool BoolList::_internal_value(int index) const {
  return value_.Get(index);
}
inline bool BoolList::value(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.BoolList.value)
  return _internal_value(index);
}
inline void BoolList::set_value(int index, bool value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.BoolList.value)
}
inline void BoolList::_internal_add_value(bool value) {
  value_.Add(value);
}
inline void BoolList::add_value(bool value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.BoolList.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolList::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolList::value() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.BoolList.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolList::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.BoolList.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// Record

// .perception_feature.proto.BytesList bytes_list = 1;
inline bool Record::_internal_has_bytes_list() const {
  return kind_case() == kBytesList;
}
inline bool Record::has_bytes_list() const {
  return _internal_has_bytes_list();
}
inline void Record::set_has_bytes_list() {
  _oneof_case_[0] = kBytesList;
}
inline void Record::clear_bytes_list() {
  if (_internal_has_bytes_list()) {
    if (GetArena() == nullptr) {
      delete kind_.bytes_list_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::BytesList* Record::release_bytes_list() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Record.bytes_list)
  if (_internal_has_bytes_list()) {
    clear_has_kind();
      ::perception_feature::proto::BytesList* temp = kind_.bytes_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.bytes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::BytesList& Record::_internal_bytes_list() const {
  return _internal_has_bytes_list()
      ? *kind_.bytes_list_
      : *reinterpret_cast< ::perception_feature::proto::BytesList*>(&::perception_feature::proto::_BytesList_default_instance_);
}
inline const ::perception_feature::proto::BytesList& Record::bytes_list() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Record.bytes_list)
  return _internal_bytes_list();
}
inline ::perception_feature::proto::BytesList* Record::unsafe_arena_release_bytes_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.Record.bytes_list)
  if (_internal_has_bytes_list()) {
    clear_has_kind();
    ::perception_feature::proto::BytesList* temp = kind_.bytes_list_;
    kind_.bytes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_bytes_list(::perception_feature::proto::BytesList* bytes_list) {
  clear_kind();
  if (bytes_list) {
    set_has_bytes_list();
    kind_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.Record.bytes_list)
}
inline ::perception_feature::proto::BytesList* Record::_internal_mutable_bytes_list() {
  if (!_internal_has_bytes_list()) {
    clear_kind();
    set_has_bytes_list();
    kind_.bytes_list_ = CreateMaybeMessage< ::perception_feature::proto::BytesList >(GetArena());
  }
  return kind_.bytes_list_;
}
inline ::perception_feature::proto::BytesList* Record::mutable_bytes_list() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Record.bytes_list)
  return _internal_mutable_bytes_list();
}

// .perception_feature.proto.BoolList bool_list = 2;
inline bool Record::_internal_has_bool_list() const {
  return kind_case() == kBoolList;
}
inline bool Record::has_bool_list() const {
  return _internal_has_bool_list();
}
inline void Record::set_has_bool_list() {
  _oneof_case_[0] = kBoolList;
}
inline void Record::clear_bool_list() {
  if (_internal_has_bool_list()) {
    if (GetArena() == nullptr) {
      delete kind_.bool_list_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::BoolList* Record::release_bool_list() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Record.bool_list)
  if (_internal_has_bool_list()) {
    clear_has_kind();
      ::perception_feature::proto::BoolList* temp = kind_.bool_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.bool_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::BoolList& Record::_internal_bool_list() const {
  return _internal_has_bool_list()
      ? *kind_.bool_list_
      : *reinterpret_cast< ::perception_feature::proto::BoolList*>(&::perception_feature::proto::_BoolList_default_instance_);
}
inline const ::perception_feature::proto::BoolList& Record::bool_list() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Record.bool_list)
  return _internal_bool_list();
}
inline ::perception_feature::proto::BoolList* Record::unsafe_arena_release_bool_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.Record.bool_list)
  if (_internal_has_bool_list()) {
    clear_has_kind();
    ::perception_feature::proto::BoolList* temp = kind_.bool_list_;
    kind_.bool_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_bool_list(::perception_feature::proto::BoolList* bool_list) {
  clear_kind();
  if (bool_list) {
    set_has_bool_list();
    kind_.bool_list_ = bool_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.Record.bool_list)
}
inline ::perception_feature::proto::BoolList* Record::_internal_mutable_bool_list() {
  if (!_internal_has_bool_list()) {
    clear_kind();
    set_has_bool_list();
    kind_.bool_list_ = CreateMaybeMessage< ::perception_feature::proto::BoolList >(GetArena());
  }
  return kind_.bool_list_;
}
inline ::perception_feature::proto::BoolList* Record::mutable_bool_list() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Record.bool_list)
  return _internal_mutable_bool_list();
}

// .perception_feature.proto.IntList int_list = 3;
inline bool Record::_internal_has_int_list() const {
  return kind_case() == kIntList;
}
inline bool Record::has_int_list() const {
  return _internal_has_int_list();
}
inline void Record::set_has_int_list() {
  _oneof_case_[0] = kIntList;
}
inline void Record::clear_int_list() {
  if (_internal_has_int_list()) {
    if (GetArena() == nullptr) {
      delete kind_.int_list_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::IntList* Record::release_int_list() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Record.int_list)
  if (_internal_has_int_list()) {
    clear_has_kind();
      ::perception_feature::proto::IntList* temp = kind_.int_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.int_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::IntList& Record::_internal_int_list() const {
  return _internal_has_int_list()
      ? *kind_.int_list_
      : *reinterpret_cast< ::perception_feature::proto::IntList*>(&::perception_feature::proto::_IntList_default_instance_);
}
inline const ::perception_feature::proto::IntList& Record::int_list() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Record.int_list)
  return _internal_int_list();
}
inline ::perception_feature::proto::IntList* Record::unsafe_arena_release_int_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.Record.int_list)
  if (_internal_has_int_list()) {
    clear_has_kind();
    ::perception_feature::proto::IntList* temp = kind_.int_list_;
    kind_.int_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_int_list(::perception_feature::proto::IntList* int_list) {
  clear_kind();
  if (int_list) {
    set_has_int_list();
    kind_.int_list_ = int_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.Record.int_list)
}
inline ::perception_feature::proto::IntList* Record::_internal_mutable_int_list() {
  if (!_internal_has_int_list()) {
    clear_kind();
    set_has_int_list();
    kind_.int_list_ = CreateMaybeMessage< ::perception_feature::proto::IntList >(GetArena());
  }
  return kind_.int_list_;
}
inline ::perception_feature::proto::IntList* Record::mutable_int_list() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Record.int_list)
  return _internal_mutable_int_list();
}

// .perception_feature.proto.Int64List int64_list = 4;
inline bool Record::_internal_has_int64_list() const {
  return kind_case() == kInt64List;
}
inline bool Record::has_int64_list() const {
  return _internal_has_int64_list();
}
inline void Record::set_has_int64_list() {
  _oneof_case_[0] = kInt64List;
}
inline void Record::clear_int64_list() {
  if (_internal_has_int64_list()) {
    if (GetArena() == nullptr) {
      delete kind_.int64_list_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::Int64List* Record::release_int64_list() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Record.int64_list)
  if (_internal_has_int64_list()) {
    clear_has_kind();
      ::perception_feature::proto::Int64List* temp = kind_.int64_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.int64_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::Int64List& Record::_internal_int64_list() const {
  return _internal_has_int64_list()
      ? *kind_.int64_list_
      : *reinterpret_cast< ::perception_feature::proto::Int64List*>(&::perception_feature::proto::_Int64List_default_instance_);
}
inline const ::perception_feature::proto::Int64List& Record::int64_list() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Record.int64_list)
  return _internal_int64_list();
}
inline ::perception_feature::proto::Int64List* Record::unsafe_arena_release_int64_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.Record.int64_list)
  if (_internal_has_int64_list()) {
    clear_has_kind();
    ::perception_feature::proto::Int64List* temp = kind_.int64_list_;
    kind_.int64_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_int64_list(::perception_feature::proto::Int64List* int64_list) {
  clear_kind();
  if (int64_list) {
    set_has_int64_list();
    kind_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.Record.int64_list)
}
inline ::perception_feature::proto::Int64List* Record::_internal_mutable_int64_list() {
  if (!_internal_has_int64_list()) {
    clear_kind();
    set_has_int64_list();
    kind_.int64_list_ = CreateMaybeMessage< ::perception_feature::proto::Int64List >(GetArena());
  }
  return kind_.int64_list_;
}
inline ::perception_feature::proto::Int64List* Record::mutable_int64_list() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Record.int64_list)
  return _internal_mutable_int64_list();
}

// .perception_feature.proto.FloatList float_list = 5;
inline bool Record::_internal_has_float_list() const {
  return kind_case() == kFloatList;
}
inline bool Record::has_float_list() const {
  return _internal_has_float_list();
}
inline void Record::set_has_float_list() {
  _oneof_case_[0] = kFloatList;
}
inline void Record::clear_float_list() {
  if (_internal_has_float_list()) {
    if (GetArena() == nullptr) {
      delete kind_.float_list_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::FloatList* Record::release_float_list() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Record.float_list)
  if (_internal_has_float_list()) {
    clear_has_kind();
      ::perception_feature::proto::FloatList* temp = kind_.float_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.float_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::FloatList& Record::_internal_float_list() const {
  return _internal_has_float_list()
      ? *kind_.float_list_
      : *reinterpret_cast< ::perception_feature::proto::FloatList*>(&::perception_feature::proto::_FloatList_default_instance_);
}
inline const ::perception_feature::proto::FloatList& Record::float_list() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Record.float_list)
  return _internal_float_list();
}
inline ::perception_feature::proto::FloatList* Record::unsafe_arena_release_float_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.Record.float_list)
  if (_internal_has_float_list()) {
    clear_has_kind();
    ::perception_feature::proto::FloatList* temp = kind_.float_list_;
    kind_.float_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_float_list(::perception_feature::proto::FloatList* float_list) {
  clear_kind();
  if (float_list) {
    set_has_float_list();
    kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.Record.float_list)
}
inline ::perception_feature::proto::FloatList* Record::_internal_mutable_float_list() {
  if (!_internal_has_float_list()) {
    clear_kind();
    set_has_float_list();
    kind_.float_list_ = CreateMaybeMessage< ::perception_feature::proto::FloatList >(GetArena());
  }
  return kind_.float_list_;
}
inline ::perception_feature::proto::FloatList* Record::mutable_float_list() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Record.float_list)
  return _internal_mutable_float_list();
}

// .perception_feature.proto.DoubleList double_list = 6;
inline bool Record::_internal_has_double_list() const {
  return kind_case() == kDoubleList;
}
inline bool Record::has_double_list() const {
  return _internal_has_double_list();
}
inline void Record::set_has_double_list() {
  _oneof_case_[0] = kDoubleList;
}
inline void Record::clear_double_list() {
  if (_internal_has_double_list()) {
    if (GetArena() == nullptr) {
      delete kind_.double_list_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::DoubleList* Record::release_double_list() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Record.double_list)
  if (_internal_has_double_list()) {
    clear_has_kind();
      ::perception_feature::proto::DoubleList* temp = kind_.double_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.double_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::DoubleList& Record::_internal_double_list() const {
  return _internal_has_double_list()
      ? *kind_.double_list_
      : *reinterpret_cast< ::perception_feature::proto::DoubleList*>(&::perception_feature::proto::_DoubleList_default_instance_);
}
inline const ::perception_feature::proto::DoubleList& Record::double_list() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Record.double_list)
  return _internal_double_list();
}
inline ::perception_feature::proto::DoubleList* Record::unsafe_arena_release_double_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.Record.double_list)
  if (_internal_has_double_list()) {
    clear_has_kind();
    ::perception_feature::proto::DoubleList* temp = kind_.double_list_;
    kind_.double_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_double_list(::perception_feature::proto::DoubleList* double_list) {
  clear_kind();
  if (double_list) {
    set_has_double_list();
    kind_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.Record.double_list)
}
inline ::perception_feature::proto::DoubleList* Record::_internal_mutable_double_list() {
  if (!_internal_has_double_list()) {
    clear_kind();
    set_has_double_list();
    kind_.double_list_ = CreateMaybeMessage< ::perception_feature::proto::DoubleList >(GetArena());
  }
  return kind_.double_list_;
}
inline ::perception_feature::proto::DoubleList* Record::mutable_double_list() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Record.double_list)
  return _internal_mutable_double_list();
}

// .perception_feature.proto.IVRecordList iv_list = 7;
inline bool Record::_internal_has_iv_list() const {
  return kind_case() == kIvList;
}
inline bool Record::has_iv_list() const {
  return _internal_has_iv_list();
}
inline void Record::set_has_iv_list() {
  _oneof_case_[0] = kIvList;
}
inline void Record::clear_iv_list() {
  if (_internal_has_iv_list()) {
    if (GetArena() == nullptr) {
      delete kind_.iv_list_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::IVRecordList* Record::release_iv_list() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Record.iv_list)
  if (_internal_has_iv_list()) {
    clear_has_kind();
      ::perception_feature::proto::IVRecordList* temp = kind_.iv_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.iv_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::IVRecordList& Record::_internal_iv_list() const {
  return _internal_has_iv_list()
      ? *kind_.iv_list_
      : *reinterpret_cast< ::perception_feature::proto::IVRecordList*>(&::perception_feature::proto::_IVRecordList_default_instance_);
}
inline const ::perception_feature::proto::IVRecordList& Record::iv_list() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Record.iv_list)
  return _internal_iv_list();
}
inline ::perception_feature::proto::IVRecordList* Record::unsafe_arena_release_iv_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.Record.iv_list)
  if (_internal_has_iv_list()) {
    clear_has_kind();
    ::perception_feature::proto::IVRecordList* temp = kind_.iv_list_;
    kind_.iv_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_iv_list(::perception_feature::proto::IVRecordList* iv_list) {
  clear_kind();
  if (iv_list) {
    set_has_iv_list();
    kind_.iv_list_ = iv_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.Record.iv_list)
}
inline ::perception_feature::proto::IVRecordList* Record::_internal_mutable_iv_list() {
  if (!_internal_has_iv_list()) {
    clear_kind();
    set_has_iv_list();
    kind_.iv_list_ = CreateMaybeMessage< ::perception_feature::proto::IVRecordList >(GetArena());
  }
  return kind_.iv_list_;
}
inline ::perception_feature::proto::IVRecordList* Record::mutable_iv_list() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Record.iv_list)
  return _internal_mutable_iv_list();
}

inline bool Record::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Record::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Record::KindCase Record::kind_case() const {
  return Record::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecordEntry

// string key = 1;
inline void RecordEntry::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordEntry::key() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.RecordEntry.key)
  return _internal_key();
}
inline void RecordEntry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.RecordEntry.key)
}
inline std::string* RecordEntry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.RecordEntry.key)
  return _internal_mutable_key();
}
inline const std::string& RecordEntry::_internal_key() const {
  return key_.Get();
}
inline void RecordEntry::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordEntry::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.RecordEntry.key)
}
inline void RecordEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.RecordEntry.key)
}
inline void RecordEntry::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.RecordEntry.key)
}
inline std::string* RecordEntry::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordEntry::release_key() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.RecordEntry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.RecordEntry.key)
}

// .perception_feature.proto.Record value = 2;
inline bool RecordEntry::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool RecordEntry::has_value() const {
  return _internal_has_value();
}
inline void RecordEntry::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::perception_feature::proto::Record& RecordEntry::_internal_value() const {
  const ::perception_feature::proto::Record* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception_feature::proto::Record*>(
      &::perception_feature::proto::_Record_default_instance_);
}
inline const ::perception_feature::proto::Record& RecordEntry::value() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.RecordEntry.value)
  return _internal_value();
}
inline void RecordEntry::unsafe_arena_set_allocated_value(
    ::perception_feature::proto::Record* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.RecordEntry.value)
}
inline ::perception_feature::proto::Record* RecordEntry::release_value() {
  
  ::perception_feature::proto::Record* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception_feature::proto::Record* RecordEntry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.RecordEntry.value)
  
  ::perception_feature::proto::Record* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::perception_feature::proto::Record* RecordEntry::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception_feature::proto::Record>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::perception_feature::proto::Record* RecordEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.RecordEntry.value)
  return _internal_mutable_value();
}
inline void RecordEntry::set_allocated_value(::perception_feature::proto::Record* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.RecordEntry.value)
}

// -------------------------------------------------------------------

// IVRecordEntry

// int64 index = 1;
inline void IVRecordEntry::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IVRecordEntry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IVRecordEntry::index() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.IVRecordEntry.index)
  return _internal_index();
}
inline void IVRecordEntry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  index_ = value;
}
inline void IVRecordEntry::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.IVRecordEntry.index)
}

// .perception_feature.proto.Record value = 2;
inline bool IVRecordEntry::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool IVRecordEntry::has_value() const {
  return _internal_has_value();
}
inline void IVRecordEntry::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::perception_feature::proto::Record& IVRecordEntry::_internal_value() const {
  const ::perception_feature::proto::Record* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception_feature::proto::Record*>(
      &::perception_feature::proto::_Record_default_instance_);
}
inline const ::perception_feature::proto::Record& IVRecordEntry::value() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.IVRecordEntry.value)
  return _internal_value();
}
inline void IVRecordEntry::unsafe_arena_set_allocated_value(
    ::perception_feature::proto::Record* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.IVRecordEntry.value)
}
inline ::perception_feature::proto::Record* IVRecordEntry::release_value() {
  
  ::perception_feature::proto::Record* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception_feature::proto::Record* IVRecordEntry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.IVRecordEntry.value)
  
  ::perception_feature::proto::Record* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::perception_feature::proto::Record* IVRecordEntry::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception_feature::proto::Record>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::perception_feature::proto::Record* IVRecordEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.IVRecordEntry.value)
  return _internal_mutable_value();
}
inline void IVRecordEntry::set_allocated_value(::perception_feature::proto::Record* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.IVRecordEntry.value)
}

// -------------------------------------------------------------------

// IVRecordList

// repeated .perception_feature.proto.IVRecordEntry iv_record = 1;
inline int IVRecordList::_internal_iv_record_size() const {
  return iv_record_.size();
}
inline int IVRecordList::iv_record_size() const {
  return _internal_iv_record_size();
}
inline void IVRecordList::clear_iv_record() {
  iv_record_.Clear();
}
inline ::perception_feature::proto::IVRecordEntry* IVRecordList::mutable_iv_record(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.IVRecordList.iv_record)
  return iv_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::IVRecordEntry >*
IVRecordList::mutable_iv_record() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.IVRecordList.iv_record)
  return &iv_record_;
}
inline const ::perception_feature::proto::IVRecordEntry& IVRecordList::_internal_iv_record(int index) const {
  return iv_record_.Get(index);
}
inline const ::perception_feature::proto::IVRecordEntry& IVRecordList::iv_record(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.IVRecordList.iv_record)
  return _internal_iv_record(index);
}
inline ::perception_feature::proto::IVRecordEntry* IVRecordList::_internal_add_iv_record() {
  return iv_record_.Add();
}
inline ::perception_feature::proto::IVRecordEntry* IVRecordList::add_iv_record() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.IVRecordList.iv_record)
  return _internal_add_iv_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::IVRecordEntry >&
IVRecordList::iv_record() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.IVRecordList.iv_record)
  return iv_record_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace perception_feature

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception_feature::proto::OutputFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception_feature::proto::OutputFormat>() {
  return ::perception_feature::proto::OutputFormat_descriptor();
}
template <> struct is_proto_enum< ::perception_feature::proto::FeatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception_feature::proto::FeatureType>() {
  return ::perception_feature::proto::FeatureType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
