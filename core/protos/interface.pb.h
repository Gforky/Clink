// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_interface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_interface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_interface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_interface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2eproto;
namespace perception_feature {
namespace proto {
class DinResultRecord;
class DinResultRecordDefaultTypeInternal;
extern DinResultRecordDefaultTypeInternal _DinResultRecord_default_instance_;
class FeatureRequest;
class FeatureRequestDefaultTypeInternal;
extern FeatureRequestDefaultTypeInternal _FeatureRequest_default_instance_;
class FeatureResponse;
class FeatureResponseDefaultTypeInternal;
extern FeatureResponseDefaultTypeInternal _FeatureResponse_default_instance_;
class FeatureResponse_ResultMapEntry_DoNotUse;
class FeatureResponse_ResultMapEntry_DoNotUseDefaultTypeInternal;
extern FeatureResponse_ResultMapEntry_DoNotUseDefaultTypeInternal _FeatureResponse_ResultMapEntry_DoNotUse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class ResultRecord;
class ResultRecordDefaultTypeInternal;
extern ResultRecordDefaultTypeInternal _ResultRecord_default_instance_;
class SampleRecord;
class SampleRecordDefaultTypeInternal;
extern SampleRecordDefaultTypeInternal _SampleRecord_default_instance_;
class SampleRecordList;
class SampleRecordListDefaultTypeInternal;
extern SampleRecordListDefaultTypeInternal _SampleRecordList_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
}  // namespace proto
}  // namespace perception_feature
PROTOBUF_NAMESPACE_OPEN
template<> ::perception_feature::proto::DinResultRecord* Arena::CreateMaybeMessage<::perception_feature::proto::DinResultRecord>(Arena*);
template<> ::perception_feature::proto::FeatureRequest* Arena::CreateMaybeMessage<::perception_feature::proto::FeatureRequest>(Arena*);
template<> ::perception_feature::proto::FeatureResponse* Arena::CreateMaybeMessage<::perception_feature::proto::FeatureResponse>(Arena*);
template<> ::perception_feature::proto::FeatureResponse_ResultMapEntry_DoNotUse* Arena::CreateMaybeMessage<::perception_feature::proto::FeatureResponse_ResultMapEntry_DoNotUse>(Arena*);
template<> ::perception_feature::proto::Request* Arena::CreateMaybeMessage<::perception_feature::proto::Request>(Arena*);
template<> ::perception_feature::proto::ResultRecord* Arena::CreateMaybeMessage<::perception_feature::proto::ResultRecord>(Arena*);
template<> ::perception_feature::proto::SampleRecord* Arena::CreateMaybeMessage<::perception_feature::proto::SampleRecord>(Arena*);
template<> ::perception_feature::proto::SampleRecordList* Arena::CreateMaybeMessage<::perception_feature::proto::SampleRecordList>(Arena*);
template<> ::perception_feature::proto::SearchRequest* Arena::CreateMaybeMessage<::perception_feature::proto::SearchRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception_feature {
namespace proto {

// ===================================================================

class SearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .perception_feature.proto.Record records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::perception_feature::proto::Record* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record >*
      mutable_records();
  private:
  const ::perception_feature::proto::Record& _internal_records(int index) const;
  ::perception_feature::proto::Record* _internal_add_records();
  public:
  const ::perception_feature::proto::Record& records(int index) const;
  ::perception_feature::proto::Record* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record >&
      records() const;

  // @@protoc_insertion_point(class_scope:perception_feature.proto.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum KindCase {
    kSearchRequest = 1,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchRequestFieldNumber = 1,
  };
  // .perception_feature.proto.SearchRequest search_request = 1;
  bool has_search_request() const;
  private:
  bool _internal_has_search_request() const;
  public:
  void clear_search_request();
  const ::perception_feature::proto::SearchRequest& search_request() const;
  ::perception_feature::proto::SearchRequest* release_search_request();
  ::perception_feature::proto::SearchRequest* mutable_search_request();
  void set_allocated_search_request(::perception_feature::proto::SearchRequest* search_request);
  private:
  const ::perception_feature::proto::SearchRequest& _internal_search_request() const;
  ::perception_feature::proto::SearchRequest* _internal_mutable_search_request();
  public:
  void unsafe_arena_set_allocated_search_request(
      ::perception_feature::proto::SearchRequest* search_request);
  ::perception_feature::proto::SearchRequest* unsafe_arena_release_search_request();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:perception_feature.proto.Request)
 private:
  class _Internal;
  void set_has_search_request();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    KindUnion() {}
    ::perception_feature::proto::SearchRequest* search_request_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SampleRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.SampleRecord) */ {
 public:
  inline SampleRecord() : SampleRecord(nullptr) {}
  virtual ~SampleRecord();

  SampleRecord(const SampleRecord& from);
  SampleRecord(SampleRecord&& from) noexcept
    : SampleRecord() {
    *this = ::std::move(from);
  }

  inline SampleRecord& operator=(const SampleRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleRecord& operator=(SampleRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SampleRecord* internal_default_instance() {
    return reinterpret_cast<const SampleRecord*>(
               &_SampleRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SampleRecord& a, SampleRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleRecord* New() const final {
    return CreateMaybeMessage<SampleRecord>(nullptr);
  }

  SampleRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleRecord& from);
  void MergeFrom(const SampleRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.SampleRecord";
  }
  protected:
  explicit SampleRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureListFieldNumber = 1,
  };
  // repeated .perception_feature.proto.Record feature_list = 1;
  int feature_list_size() const;
  private:
  int _internal_feature_list_size() const;
  public:
  void clear_feature_list();
  ::perception_feature::proto::Record* mutable_feature_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record >*
      mutable_feature_list();
  private:
  const ::perception_feature::proto::Record& _internal_feature_list(int index) const;
  ::perception_feature::proto::Record* _internal_add_feature_list();
  public:
  const ::perception_feature::proto::Record& feature_list(int index) const;
  ::perception_feature::proto::Record* add_feature_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record >&
      feature_list() const;

  // @@protoc_insertion_point(class_scope:perception_feature.proto.SampleRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record > feature_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SampleRecordList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.SampleRecordList) */ {
 public:
  inline SampleRecordList() : SampleRecordList(nullptr) {}
  virtual ~SampleRecordList();

  SampleRecordList(const SampleRecordList& from);
  SampleRecordList(SampleRecordList&& from) noexcept
    : SampleRecordList() {
    *this = ::std::move(from);
  }

  inline SampleRecordList& operator=(const SampleRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleRecordList& operator=(SampleRecordList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SampleRecordList* internal_default_instance() {
    return reinterpret_cast<const SampleRecordList*>(
               &_SampleRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SampleRecordList& a, SampleRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleRecordList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleRecordList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleRecordList* New() const final {
    return CreateMaybeMessage<SampleRecordList>(nullptr);
  }

  SampleRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleRecordList& from);
  void MergeFrom(const SampleRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.SampleRecordList";
  }
  protected:
  explicit SampleRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleListFieldNumber = 1,
  };
  // repeated .perception_feature.proto.SampleRecord sample_list = 1;
  int sample_list_size() const;
  private:
  int _internal_sample_list_size() const;
  public:
  void clear_sample_list();
  ::perception_feature::proto::SampleRecord* mutable_sample_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord >*
      mutable_sample_list();
  private:
  const ::perception_feature::proto::SampleRecord& _internal_sample_list(int index) const;
  ::perception_feature::proto::SampleRecord* _internal_add_sample_list();
  public:
  const ::perception_feature::proto::SampleRecord& sample_list(int index) const;
  ::perception_feature::proto::SampleRecord* add_sample_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord >&
      sample_list() const;

  // @@protoc_insertion_point(class_scope:perception_feature.proto.SampleRecordList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord > sample_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class FeatureRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.FeatureRequest) */ {
 public:
  inline FeatureRequest() : FeatureRequest(nullptr) {}
  virtual ~FeatureRequest();

  FeatureRequest(const FeatureRequest& from);
  FeatureRequest(FeatureRequest&& from) noexcept
    : FeatureRequest() {
    *this = ::std::move(from);
  }

  inline FeatureRequest& operator=(const FeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureRequest& operator=(FeatureRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureRequest* internal_default_instance() {
    return reinterpret_cast<const FeatureRequest*>(
               &_FeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FeatureRequest& a, FeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureRequest* New() const final {
    return CreateMaybeMessage<FeatureRequest>(nullptr);
  }

  FeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureRequest& from);
  void MergeFrom(const FeatureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.FeatureRequest";
  }
  protected:
  explicit FeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleListFieldNumber = 4,
    kCsvInputFieldNumber = 5,
    kSidFieldNumber = 1,
    kBizNameFieldNumber = 3,
  };
  // repeated .perception_feature.proto.SampleRecord sample_list = 4;
  int sample_list_size() const;
  private:
  int _internal_sample_list_size() const;
  public:
  void clear_sample_list();
  ::perception_feature::proto::SampleRecord* mutable_sample_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord >*
      mutable_sample_list();
  private:
  const ::perception_feature::proto::SampleRecord& _internal_sample_list(int index) const;
  ::perception_feature::proto::SampleRecord* _internal_add_sample_list();
  public:
  const ::perception_feature::proto::SampleRecord& sample_list(int index) const;
  ::perception_feature::proto::SampleRecord* add_sample_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord >&
      sample_list() const;

  // repeated string csv_input = 5;
  int csv_input_size() const;
  private:
  int _internal_csv_input_size() const;
  public:
  void clear_csv_input();
  const std::string& csv_input(int index) const;
  std::string* mutable_csv_input(int index);
  void set_csv_input(int index, const std::string& value);
  void set_csv_input(int index, std::string&& value);
  void set_csv_input(int index, const char* value);
  void set_csv_input(int index, const char* value, size_t size);
  std::string* add_csv_input();
  void add_csv_input(const std::string& value);
  void add_csv_input(std::string&& value);
  void add_csv_input(const char* value);
  void add_csv_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& csv_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_csv_input();
  private:
  const std::string& _internal_csv_input(int index) const;
  std::string* _internal_add_csv_input();
  public:

  // string sid = 1;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // string biz_name = 3;
  void clear_biz_name();
  const std::string& biz_name() const;
  void set_biz_name(const std::string& value);
  void set_biz_name(std::string&& value);
  void set_biz_name(const char* value);
  void set_biz_name(const char* value, size_t size);
  std::string* mutable_biz_name();
  std::string* release_biz_name();
  void set_allocated_biz_name(std::string* biz_name);
  private:
  const std::string& _internal_biz_name() const;
  void _internal_set_biz_name(const std::string& value);
  std::string* _internal_mutable_biz_name();
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.FeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord > sample_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> csv_input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class DinResultRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.DinResultRecord) */ {
 public:
  inline DinResultRecord() : DinResultRecord(nullptr) {}
  virtual ~DinResultRecord();

  DinResultRecord(const DinResultRecord& from);
  DinResultRecord(DinResultRecord&& from) noexcept
    : DinResultRecord() {
    *this = ::std::move(from);
  }

  inline DinResultRecord& operator=(const DinResultRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline DinResultRecord& operator=(DinResultRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DinResultRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DinResultRecord* internal_default_instance() {
    return reinterpret_cast<const DinResultRecord*>(
               &_DinResultRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DinResultRecord& a, DinResultRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(DinResultRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DinResultRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DinResultRecord* New() const final {
    return CreateMaybeMessage<DinResultRecord>(nullptr);
  }

  DinResultRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DinResultRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DinResultRecord& from);
  void MergeFrom(const DinResultRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DinResultRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.DinResultRecord";
  }
  protected:
  explicit DinResultRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated float index = 1 [packed = true];
  int index_size() const;
  private:
  int _internal_index_size() const;
  public:
  void clear_index();
  private:
  float _internal_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_index() const;
  void _internal_add_index(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_index();
  public:
  float index(int index) const;
  void set_index(int index, float value);
  void add_index(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_index();

  // repeated float value = 2 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:perception_feature.proto.DinResultRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > index_;
  mutable std::atomic<int> _index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ResultRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.ResultRecord) */ {
 public:
  inline ResultRecord() : ResultRecord(nullptr) {}
  virtual ~ResultRecord();

  ResultRecord(const ResultRecord& from);
  ResultRecord(ResultRecord&& from) noexcept
    : ResultRecord() {
    *this = ::std::move(from);
  }

  inline ResultRecord& operator=(const ResultRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultRecord& operator=(ResultRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultRecord& default_instance();

  enum KindCase {
    kDinResult = 1,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultRecord* internal_default_instance() {
    return reinterpret_cast<const ResultRecord*>(
               &_ResultRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResultRecord& a, ResultRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultRecord* New() const final {
    return CreateMaybeMessage<ResultRecord>(nullptr);
  }

  ResultRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultRecord& from);
  void MergeFrom(const ResultRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.ResultRecord";
  }
  protected:
  explicit ResultRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDinResultFieldNumber = 1,
  };
  // .perception_feature.proto.DinResultRecord din_result = 1;
  bool has_din_result() const;
  private:
  bool _internal_has_din_result() const;
  public:
  void clear_din_result();
  const ::perception_feature::proto::DinResultRecord& din_result() const;
  ::perception_feature::proto::DinResultRecord* release_din_result();
  ::perception_feature::proto::DinResultRecord* mutable_din_result();
  void set_allocated_din_result(::perception_feature::proto::DinResultRecord* din_result);
  private:
  const ::perception_feature::proto::DinResultRecord& _internal_din_result() const;
  ::perception_feature::proto::DinResultRecord* _internal_mutable_din_result();
  public:
  void unsafe_arena_set_allocated_din_result(
      ::perception_feature::proto::DinResultRecord* din_result);
  ::perception_feature::proto::DinResultRecord* unsafe_arena_release_din_result();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:perception_feature.proto.ResultRecord)
 private:
  class _Internal;
  void set_has_din_result();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    KindUnion() {}
    ::perception_feature::proto::DinResultRecord* din_result_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class FeatureResponse_ResultMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FeatureResponse_ResultMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FeatureResponse_ResultMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FeatureResponse_ResultMapEntry_DoNotUse();
  explicit FeatureResponse_ResultMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FeatureResponse_ResultMapEntry_DoNotUse& other);
  static const FeatureResponse_ResultMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FeatureResponse_ResultMapEntry_DoNotUse*>(&_FeatureResponse_ResultMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class FeatureResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.FeatureResponse) */ {
 public:
  inline FeatureResponse() : FeatureResponse(nullptr) {}
  virtual ~FeatureResponse();

  FeatureResponse(const FeatureResponse& from);
  FeatureResponse(FeatureResponse&& from) noexcept
    : FeatureResponse() {
    *this = ::std::move(from);
  }

  inline FeatureResponse& operator=(const FeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureResponse& operator=(FeatureResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureResponse* internal_default_instance() {
    return reinterpret_cast<const FeatureResponse*>(
               &_FeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FeatureResponse& a, FeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureResponse* New() const final {
    return CreateMaybeMessage<FeatureResponse>(nullptr);
  }

  FeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureResponse& from);
  void MergeFrom(const FeatureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.FeatureResponse";
  }
  protected:
  explicit FeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultMapFieldNumber = 5,
    kSidFieldNumber = 1,
    kErrMsgFieldNumber = 3,
    kErrNoFieldNumber = 2,
    kOutputFormatFieldNumber = 4,
  };
  // map<int32, .perception_feature.proto.ResultRecord> result_map = 5;
  int result_map_size() const;
  private:
  int _internal_result_map_size() const;
  public:
  void clear_result_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord >&
      _internal_result_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord >*
      _internal_mutable_result_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord >&
      result_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord >*
      mutable_result_map();

  // string sid = 1;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // string err_msg = 3;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // int32 err_no = 2;
  void clear_err_no();
  ::PROTOBUF_NAMESPACE_ID::int32 err_no() const;
  void set_err_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err_no() const;
  void _internal_set_err_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .perception_feature.proto.OutputFormat output_format = 4;
  void clear_output_format();
  ::perception_feature::proto::OutputFormat output_format() const;
  void set_output_format(::perception_feature::proto::OutputFormat value);
  private:
  ::perception_feature::proto::OutputFormat _internal_output_format() const;
  void _internal_set_output_format(::perception_feature::proto::OutputFormat value);
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.FeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FeatureResponse_ResultMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > result_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_no_;
  int output_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// ===================================================================

class FeatureService_Stub;

class FeatureService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FeatureService() {};
 public:
  virtual ~FeatureService();

  typedef FeatureService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void FeatureExtract(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::perception_feature::proto::FeatureRequest* request,
                       ::perception_feature::proto::FeatureResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FeatureService);
};

class FeatureService_Stub : public FeatureService {
 public:
  FeatureService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FeatureService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FeatureService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FeatureService ------------------------------------------

  void FeatureExtract(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::perception_feature::proto::FeatureRequest* request,
                       ::perception_feature::proto::FeatureResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FeatureService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchRequest

// repeated .perception_feature.proto.Record records = 1;
inline int SearchRequest::_internal_records_size() const {
  return records_.size();
}
inline int SearchRequest::records_size() const {
  return _internal_records_size();
}
inline ::perception_feature::proto::Record* SearchRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.SearchRequest.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record >*
SearchRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.SearchRequest.records)
  return &records_;
}
inline const ::perception_feature::proto::Record& SearchRequest::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::perception_feature::proto::Record& SearchRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.SearchRequest.records)
  return _internal_records(index);
}
inline ::perception_feature::proto::Record* SearchRequest::_internal_add_records() {
  return records_.Add();
}
inline ::perception_feature::proto::Record* SearchRequest::add_records() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.SearchRequest.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record >&
SearchRequest::records() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.SearchRequest.records)
  return records_;
}

// -------------------------------------------------------------------

// Request

// .perception_feature.proto.SearchRequest search_request = 1;
inline bool Request::_internal_has_search_request() const {
  return kind_case() == kSearchRequest;
}
inline bool Request::has_search_request() const {
  return _internal_has_search_request();
}
inline void Request::set_has_search_request() {
  _oneof_case_[0] = kSearchRequest;
}
inline void Request::clear_search_request() {
  if (_internal_has_search_request()) {
    if (GetArena() == nullptr) {
      delete kind_.search_request_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::SearchRequest* Request::release_search_request() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Request.search_request)
  if (_internal_has_search_request()) {
    clear_has_kind();
      ::perception_feature::proto::SearchRequest* temp = kind_.search_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.search_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::SearchRequest& Request::_internal_search_request() const {
  return _internal_has_search_request()
      ? *kind_.search_request_
      : *reinterpret_cast< ::perception_feature::proto::SearchRequest*>(&::perception_feature::proto::_SearchRequest_default_instance_);
}
inline const ::perception_feature::proto::SearchRequest& Request::search_request() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Request.search_request)
  return _internal_search_request();
}
inline ::perception_feature::proto::SearchRequest* Request::unsafe_arena_release_search_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.Request.search_request)
  if (_internal_has_search_request()) {
    clear_has_kind();
    ::perception_feature::proto::SearchRequest* temp = kind_.search_request_;
    kind_.search_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_search_request(::perception_feature::proto::SearchRequest* search_request) {
  clear_kind();
  if (search_request) {
    set_has_search_request();
    kind_.search_request_ = search_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.Request.search_request)
}
inline ::perception_feature::proto::SearchRequest* Request::_internal_mutable_search_request() {
  if (!_internal_has_search_request()) {
    clear_kind();
    set_has_search_request();
    kind_.search_request_ = CreateMaybeMessage< ::perception_feature::proto::SearchRequest >(GetArena());
  }
  return kind_.search_request_;
}
inline ::perception_feature::proto::SearchRequest* Request::mutable_search_request() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Request.search_request)
  return _internal_mutable_search_request();
}

inline bool Request::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Request::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Request::KindCase Request::kind_case() const {
  return Request::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SampleRecord

// repeated .perception_feature.proto.Record feature_list = 1;
inline int SampleRecord::_internal_feature_list_size() const {
  return feature_list_.size();
}
inline int SampleRecord::feature_list_size() const {
  return _internal_feature_list_size();
}
inline ::perception_feature::proto::Record* SampleRecord::mutable_feature_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.SampleRecord.feature_list)
  return feature_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record >*
SampleRecord::mutable_feature_list() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.SampleRecord.feature_list)
  return &feature_list_;
}
inline const ::perception_feature::proto::Record& SampleRecord::_internal_feature_list(int index) const {
  return feature_list_.Get(index);
}
inline const ::perception_feature::proto::Record& SampleRecord::feature_list(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.SampleRecord.feature_list)
  return _internal_feature_list(index);
}
inline ::perception_feature::proto::Record* SampleRecord::_internal_add_feature_list() {
  return feature_list_.Add();
}
inline ::perception_feature::proto::Record* SampleRecord::add_feature_list() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.SampleRecord.feature_list)
  return _internal_add_feature_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Record >&
SampleRecord::feature_list() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.SampleRecord.feature_list)
  return feature_list_;
}

// -------------------------------------------------------------------

// SampleRecordList

// repeated .perception_feature.proto.SampleRecord sample_list = 1;
inline int SampleRecordList::_internal_sample_list_size() const {
  return sample_list_.size();
}
inline int SampleRecordList::sample_list_size() const {
  return _internal_sample_list_size();
}
inline void SampleRecordList::clear_sample_list() {
  sample_list_.Clear();
}
inline ::perception_feature::proto::SampleRecord* SampleRecordList::mutable_sample_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.SampleRecordList.sample_list)
  return sample_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord >*
SampleRecordList::mutable_sample_list() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.SampleRecordList.sample_list)
  return &sample_list_;
}
inline const ::perception_feature::proto::SampleRecord& SampleRecordList::_internal_sample_list(int index) const {
  return sample_list_.Get(index);
}
inline const ::perception_feature::proto::SampleRecord& SampleRecordList::sample_list(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.SampleRecordList.sample_list)
  return _internal_sample_list(index);
}
inline ::perception_feature::proto::SampleRecord* SampleRecordList::_internal_add_sample_list() {
  return sample_list_.Add();
}
inline ::perception_feature::proto::SampleRecord* SampleRecordList::add_sample_list() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.SampleRecordList.sample_list)
  return _internal_add_sample_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord >&
SampleRecordList::sample_list() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.SampleRecordList.sample_list)
  return sample_list_;
}

// -------------------------------------------------------------------

// FeatureRequest

// string sid = 1;
inline void FeatureRequest::clear_sid() {
  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FeatureRequest::sid() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FeatureRequest.sid)
  return _internal_sid();
}
inline void FeatureRequest::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.FeatureRequest.sid)
}
inline std::string* FeatureRequest::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.FeatureRequest.sid)
  return _internal_mutable_sid();
}
inline const std::string& FeatureRequest::_internal_sid() const {
  return sid_.Get();
}
inline void FeatureRequest::_internal_set_sid(const std::string& value) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FeatureRequest::set_sid(std::string&& value) {
  
  sid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.FeatureRequest.sid)
}
inline void FeatureRequest::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.FeatureRequest.sid)
}
inline void FeatureRequest::set_sid(const char* value,
    size_t size) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.FeatureRequest.sid)
}
inline std::string* FeatureRequest::_internal_mutable_sid() {
  
  return sid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FeatureRequest::release_sid() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.FeatureRequest.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FeatureRequest::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.FeatureRequest.sid)
}

// string biz_name = 3;
inline void FeatureRequest::clear_biz_name() {
  biz_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FeatureRequest::biz_name() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FeatureRequest.biz_name)
  return _internal_biz_name();
}
inline void FeatureRequest::set_biz_name(const std::string& value) {
  _internal_set_biz_name(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.FeatureRequest.biz_name)
}
inline std::string* FeatureRequest::mutable_biz_name() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.FeatureRequest.biz_name)
  return _internal_mutable_biz_name();
}
inline const std::string& FeatureRequest::_internal_biz_name() const {
  return biz_name_.Get();
}
inline void FeatureRequest::_internal_set_biz_name(const std::string& value) {
  
  biz_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FeatureRequest::set_biz_name(std::string&& value) {
  
  biz_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.FeatureRequest.biz_name)
}
inline void FeatureRequest::set_biz_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  biz_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.FeatureRequest.biz_name)
}
inline void FeatureRequest::set_biz_name(const char* value,
    size_t size) {
  
  biz_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.FeatureRequest.biz_name)
}
inline std::string* FeatureRequest::_internal_mutable_biz_name() {
  
  return biz_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FeatureRequest::release_biz_name() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.FeatureRequest.biz_name)
  return biz_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FeatureRequest::set_allocated_biz_name(std::string* biz_name) {
  if (biz_name != nullptr) {
    
  } else {
    
  }
  biz_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.FeatureRequest.biz_name)
}

// repeated .perception_feature.proto.SampleRecord sample_list = 4;
inline int FeatureRequest::_internal_sample_list_size() const {
  return sample_list_.size();
}
inline int FeatureRequest::sample_list_size() const {
  return _internal_sample_list_size();
}
inline void FeatureRequest::clear_sample_list() {
  sample_list_.Clear();
}
inline ::perception_feature::proto::SampleRecord* FeatureRequest::mutable_sample_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.FeatureRequest.sample_list)
  return sample_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord >*
FeatureRequest::mutable_sample_list() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.FeatureRequest.sample_list)
  return &sample_list_;
}
inline const ::perception_feature::proto::SampleRecord& FeatureRequest::_internal_sample_list(int index) const {
  return sample_list_.Get(index);
}
inline const ::perception_feature::proto::SampleRecord& FeatureRequest::sample_list(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FeatureRequest.sample_list)
  return _internal_sample_list(index);
}
inline ::perception_feature::proto::SampleRecord* FeatureRequest::_internal_add_sample_list() {
  return sample_list_.Add();
}
inline ::perception_feature::proto::SampleRecord* FeatureRequest::add_sample_list() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.FeatureRequest.sample_list)
  return _internal_add_sample_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::SampleRecord >&
FeatureRequest::sample_list() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.FeatureRequest.sample_list)
  return sample_list_;
}

// repeated string csv_input = 5;
inline int FeatureRequest::_internal_csv_input_size() const {
  return csv_input_.size();
}
inline int FeatureRequest::csv_input_size() const {
  return _internal_csv_input_size();
}
inline void FeatureRequest::clear_csv_input() {
  csv_input_.Clear();
}
inline std::string* FeatureRequest::add_csv_input() {
  // @@protoc_insertion_point(field_add_mutable:perception_feature.proto.FeatureRequest.csv_input)
  return _internal_add_csv_input();
}
inline const std::string& FeatureRequest::_internal_csv_input(int index) const {
  return csv_input_.Get(index);
}
inline const std::string& FeatureRequest::csv_input(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FeatureRequest.csv_input)
  return _internal_csv_input(index);
}
inline std::string* FeatureRequest::mutable_csv_input(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.FeatureRequest.csv_input)
  return csv_input_.Mutable(index);
}
inline void FeatureRequest::set_csv_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perception_feature.proto.FeatureRequest.csv_input)
  csv_input_.Mutable(index)->assign(value);
}
inline void FeatureRequest::set_csv_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perception_feature.proto.FeatureRequest.csv_input)
  csv_input_.Mutable(index)->assign(std::move(value));
}
inline void FeatureRequest::set_csv_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  csv_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.FeatureRequest.csv_input)
}
inline void FeatureRequest::set_csv_input(int index, const char* value, size_t size) {
  csv_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.FeatureRequest.csv_input)
}
inline std::string* FeatureRequest::_internal_add_csv_input() {
  return csv_input_.Add();
}
inline void FeatureRequest::add_csv_input(const std::string& value) {
  csv_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.FeatureRequest.csv_input)
}
inline void FeatureRequest::add_csv_input(std::string&& value) {
  csv_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perception_feature.proto.FeatureRequest.csv_input)
}
inline void FeatureRequest::add_csv_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  csv_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perception_feature.proto.FeatureRequest.csv_input)
}
inline void FeatureRequest::add_csv_input(const char* value, size_t size) {
  csv_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perception_feature.proto.FeatureRequest.csv_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FeatureRequest::csv_input() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.FeatureRequest.csv_input)
  return csv_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FeatureRequest::mutable_csv_input() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.FeatureRequest.csv_input)
  return &csv_input_;
}

// -------------------------------------------------------------------

// DinResultRecord

// repeated float index = 1 [packed = true];
inline int DinResultRecord::_internal_index_size() const {
  return index_.size();
}
inline int DinResultRecord::index_size() const {
  return _internal_index_size();
}
inline void DinResultRecord::clear_index() {
  index_.Clear();
}
inline float DinResultRecord::_internal_index(int index) const {
  return index_.Get(index);
}
inline float DinResultRecord::index(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DinResultRecord.index)
  return _internal_index(index);
}
inline void DinResultRecord::set_index(int index, float value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.DinResultRecord.index)
}
inline void DinResultRecord::_internal_add_index(float value) {
  index_.Add(value);
}
inline void DinResultRecord::add_index(float value) {
  _internal_add_index(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.DinResultRecord.index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DinResultRecord::_internal_index() const {
  return index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DinResultRecord::index() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.DinResultRecord.index)
  return _internal_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DinResultRecord::_internal_mutable_index() {
  return &index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DinResultRecord::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.DinResultRecord.index)
  return _internal_mutable_index();
}

// repeated float value = 2 [packed = true];
inline int DinResultRecord::_internal_value_size() const {
  return value_.size();
}
inline int DinResultRecord::value_size() const {
  return _internal_value_size();
}
inline void DinResultRecord::clear_value() {
  value_.Clear();
}
inline float DinResultRecord::_internal_value(int index) const {
  return value_.Get(index);
}
inline float DinResultRecord::value(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DinResultRecord.value)
  return _internal_value(index);
}
inline void DinResultRecord::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.DinResultRecord.value)
}
inline void DinResultRecord::_internal_add_value(float value) {
  value_.Add(value);
}
inline void DinResultRecord::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.DinResultRecord.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DinResultRecord::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DinResultRecord::value() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.DinResultRecord.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DinResultRecord::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DinResultRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.DinResultRecord.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// ResultRecord

// .perception_feature.proto.DinResultRecord din_result = 1;
inline bool ResultRecord::_internal_has_din_result() const {
  return kind_case() == kDinResult;
}
inline bool ResultRecord::has_din_result() const {
  return _internal_has_din_result();
}
inline void ResultRecord::set_has_din_result() {
  _oneof_case_[0] = kDinResult;
}
inline void ResultRecord::clear_din_result() {
  if (_internal_has_din_result()) {
    if (GetArena() == nullptr) {
      delete kind_.din_result_;
    }
    clear_has_kind();
  }
}
inline ::perception_feature::proto::DinResultRecord* ResultRecord::release_din_result() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.ResultRecord.din_result)
  if (_internal_has_din_result()) {
    clear_has_kind();
      ::perception_feature::proto::DinResultRecord* temp = kind_.din_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.din_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perception_feature::proto::DinResultRecord& ResultRecord::_internal_din_result() const {
  return _internal_has_din_result()
      ? *kind_.din_result_
      : *reinterpret_cast< ::perception_feature::proto::DinResultRecord*>(&::perception_feature::proto::_DinResultRecord_default_instance_);
}
inline const ::perception_feature::proto::DinResultRecord& ResultRecord::din_result() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.ResultRecord.din_result)
  return _internal_din_result();
}
inline ::perception_feature::proto::DinResultRecord* ResultRecord::unsafe_arena_release_din_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perception_feature.proto.ResultRecord.din_result)
  if (_internal_has_din_result()) {
    clear_has_kind();
    ::perception_feature::proto::DinResultRecord* temp = kind_.din_result_;
    kind_.din_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResultRecord::unsafe_arena_set_allocated_din_result(::perception_feature::proto::DinResultRecord* din_result) {
  clear_kind();
  if (din_result) {
    set_has_din_result();
    kind_.din_result_ = din_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception_feature.proto.ResultRecord.din_result)
}
inline ::perception_feature::proto::DinResultRecord* ResultRecord::_internal_mutable_din_result() {
  if (!_internal_has_din_result()) {
    clear_kind();
    set_has_din_result();
    kind_.din_result_ = CreateMaybeMessage< ::perception_feature::proto::DinResultRecord >(GetArena());
  }
  return kind_.din_result_;
}
inline ::perception_feature::proto::DinResultRecord* ResultRecord::mutable_din_result() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.ResultRecord.din_result)
  return _internal_mutable_din_result();
}

inline bool ResultRecord::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void ResultRecord::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline ResultRecord::KindCase ResultRecord::kind_case() const {
  return ResultRecord::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FeatureResponse

// string sid = 1;
inline void FeatureResponse::clear_sid() {
  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FeatureResponse::sid() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FeatureResponse.sid)
  return _internal_sid();
}
inline void FeatureResponse::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.FeatureResponse.sid)
}
inline std::string* FeatureResponse::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.FeatureResponse.sid)
  return _internal_mutable_sid();
}
inline const std::string& FeatureResponse::_internal_sid() const {
  return sid_.Get();
}
inline void FeatureResponse::_internal_set_sid(const std::string& value) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FeatureResponse::set_sid(std::string&& value) {
  
  sid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.FeatureResponse.sid)
}
inline void FeatureResponse::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.FeatureResponse.sid)
}
inline void FeatureResponse::set_sid(const char* value,
    size_t size) {
  
  sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.FeatureResponse.sid)
}
inline std::string* FeatureResponse::_internal_mutable_sid() {
  
  return sid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FeatureResponse::release_sid() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.FeatureResponse.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FeatureResponse::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.FeatureResponse.sid)
}

// int32 err_no = 2;
inline void FeatureResponse::clear_err_no() {
  err_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureResponse::_internal_err_no() const {
  return err_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureResponse::err_no() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FeatureResponse.err_no)
  return _internal_err_no();
}
inline void FeatureResponse::_internal_set_err_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_no_ = value;
}
inline void FeatureResponse::set_err_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err_no(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.FeatureResponse.err_no)
}

// string err_msg = 3;
inline void FeatureResponse::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FeatureResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FeatureResponse.err_msg)
  return _internal_err_msg();
}
inline void FeatureResponse::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.FeatureResponse.err_msg)
}
inline std::string* FeatureResponse::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.FeatureResponse.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& FeatureResponse::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void FeatureResponse::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FeatureResponse::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.FeatureResponse.err_msg)
}
inline void FeatureResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.FeatureResponse.err_msg)
}
inline void FeatureResponse::set_err_msg(const char* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.FeatureResponse.err_msg)
}
inline std::string* FeatureResponse::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FeatureResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.FeatureResponse.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FeatureResponse::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.FeatureResponse.err_msg)
}

// .perception_feature.proto.OutputFormat output_format = 4;
inline void FeatureResponse::clear_output_format() {
  output_format_ = 0;
}
inline ::perception_feature::proto::OutputFormat FeatureResponse::_internal_output_format() const {
  return static_cast< ::perception_feature::proto::OutputFormat >(output_format_);
}
inline ::perception_feature::proto::OutputFormat FeatureResponse::output_format() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.FeatureResponse.output_format)
  return _internal_output_format();
}
inline void FeatureResponse::_internal_set_output_format(::perception_feature::proto::OutputFormat value) {
  
  output_format_ = value;
}
inline void FeatureResponse::set_output_format(::perception_feature::proto::OutputFormat value) {
  _internal_set_output_format(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.FeatureResponse.output_format)
}

// map<int32, .perception_feature.proto.ResultRecord> result_map = 5;
inline int FeatureResponse::_internal_result_map_size() const {
  return result_map_.size();
}
inline int FeatureResponse::result_map_size() const {
  return _internal_result_map_size();
}
inline void FeatureResponse::clear_result_map() {
  result_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord >&
FeatureResponse::_internal_result_map() const {
  return result_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord >&
FeatureResponse::result_map() const {
  // @@protoc_insertion_point(field_map:perception_feature.proto.FeatureResponse.result_map)
  return _internal_result_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord >*
FeatureResponse::_internal_mutable_result_map() {
  return result_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::perception_feature::proto::ResultRecord >*
FeatureResponse::mutable_result_map() {
  // @@protoc_insertion_point(field_mutable_map:perception_feature.proto.FeatureResponse.result_map)
  return _internal_mutable_result_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace perception_feature

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_interface_2eproto
