// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_operations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_operations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_operations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_operations_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_operations_2eproto;
namespace perception_feature {
namespace proto {
class Features;
class FeaturesDefaultTypeInternal;
extern FeaturesDefaultTypeInternal _Features_default_instance_;
class Features_FeatureMapEntry_DoNotUse;
class Features_FeatureMapEntry_DoNotUseDefaultTypeInternal;
extern Features_FeatureMapEntry_DoNotUseDefaultTypeInternal _Features_FeatureMapEntry_DoNotUse_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class OperationList;
class OperationListDefaultTypeInternal;
extern OperationListDefaultTypeInternal _OperationList_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace proto
}  // namespace perception_feature
PROTOBUF_NAMESPACE_OPEN
template<> ::perception_feature::proto::Features* Arena::CreateMaybeMessage<::perception_feature::proto::Features>(Arena*);
template<> ::perception_feature::proto::Features_FeatureMapEntry_DoNotUse* Arena::CreateMaybeMessage<::perception_feature::proto::Features_FeatureMapEntry_DoNotUse>(Arena*);
template<> ::perception_feature::proto::Operation* Arena::CreateMaybeMessage<::perception_feature::proto::Operation>(Arena*);
template<> ::perception_feature::proto::OperationList* Arena::CreateMaybeMessage<::perception_feature::proto::OperationList>(Arena*);
template<> ::perception_feature::proto::Transform* Arena::CreateMaybeMessage<::perception_feature::proto::Transform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception_feature {
namespace proto {

// ===================================================================

class Features_FeatureMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Features_FeatureMapEntry_DoNotUse, 
    std::string, ::perception_feature::proto::Record,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Features_FeatureMapEntry_DoNotUse, 
    std::string, ::perception_feature::proto::Record,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Features_FeatureMapEntry_DoNotUse();
  explicit Features_FeatureMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Features_FeatureMapEntry_DoNotUse& other);
  static const Features_FeatureMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Features_FeatureMapEntry_DoNotUse*>(&_Features_FeatureMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perception_feature.proto.Features.FeatureMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Features PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.Features) */ {
 public:
  inline Features() : Features(nullptr) {}
  virtual ~Features();

  Features(const Features& from);
  Features(Features&& from) noexcept
    : Features() {
    *this = ::std::move(from);
  }

  inline Features& operator=(const Features& from) {
    CopyFrom(from);
    return *this;
  }
  inline Features& operator=(Features&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Features& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Features* internal_default_instance() {
    return reinterpret_cast<const Features*>(
               &_Features_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Features& a, Features& b) {
    a.Swap(&b);
  }
  inline void Swap(Features* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Features* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Features* New() const final {
    return CreateMaybeMessage<Features>(nullptr);
  }

  Features* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Features>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Features& from);
  void MergeFrom(const Features& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Features* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.Features";
  }
  protected:
  explicit Features(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFeatureMapFieldNumber = 1,
  };
  // map<string, .perception_feature.proto.Record> feature_map = 1;
  int feature_map_size() const;
  private:
  int _internal_feature_map_size() const;
  public:
  void clear_feature_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perception_feature::proto::Record >&
      _internal_feature_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perception_feature::proto::Record >*
      _internal_mutable_feature_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perception_feature::proto::Record >&
      feature_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perception_feature::proto::Record >*
      mutable_feature_map();

  // @@protoc_insertion_point(class_scope:perception_feature.proto.Features)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Features_FeatureMapEntry_DoNotUse,
      std::string, ::perception_feature::proto::Record,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > feature_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class Transform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kFormulaFieldNumber = 1,
  };
  // repeated .perception_feature.proto.RecordEntry params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::perception_feature::proto::RecordEntry* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::RecordEntry >*
      mutable_params();
  private:
  const ::perception_feature::proto::RecordEntry& _internal_params(int index) const;
  ::perception_feature::proto::RecordEntry* _internal_add_params();
  public:
  const ::perception_feature::proto::RecordEntry& params(int index) const;
  ::perception_feature::proto::RecordEntry* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::RecordEntry >&
      params() const;

  // string formula = 1;
  void clear_formula();
  const std::string& formula() const;
  void set_formula(const std::string& value);
  void set_formula(std::string&& value);
  void set_formula(const char* value);
  void set_formula(const char* value, size_t size);
  std::string* mutable_formula();
  std::string* release_formula();
  void set_allocated_formula(std::string* formula);
  private:
  const std::string& _internal_formula() const;
  void _internal_set_formula(const std::string& value);
  std::string* _internal_mutable_formula();
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::RecordEntry > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formula_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFeaturesFieldNumber = 1,
    kTransformFieldNumber = 5,
    kOutputFeatureFieldNumber = 2,
    kFeatureSizeFieldNumber = 3,
    kOutputFeatureTypeFieldNumber = 4,
  };
  // repeated string input_features = 1;
  int input_features_size() const;
  private:
  int _internal_input_features_size() const;
  public:
  void clear_input_features();
  const std::string& input_features(int index) const;
  std::string* mutable_input_features(int index);
  void set_input_features(int index, const std::string& value);
  void set_input_features(int index, std::string&& value);
  void set_input_features(int index, const char* value);
  void set_input_features(int index, const char* value, size_t size);
  std::string* add_input_features();
  void add_input_features(const std::string& value);
  void add_input_features(std::string&& value);
  void add_input_features(const char* value);
  void add_input_features(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_features();
  private:
  const std::string& _internal_input_features(int index) const;
  std::string* _internal_add_input_features();
  public:

  // repeated .perception_feature.proto.Transform transform = 5;
  int transform_size() const;
  private:
  int _internal_transform_size() const;
  public:
  void clear_transform();
  ::perception_feature::proto::Transform* mutable_transform(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Transform >*
      mutable_transform();
  private:
  const ::perception_feature::proto::Transform& _internal_transform(int index) const;
  ::perception_feature::proto::Transform* _internal_add_transform();
  public:
  const ::perception_feature::proto::Transform& transform(int index) const;
  ::perception_feature::proto::Transform* add_transform();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Transform >&
      transform() const;

  // string output_feature = 2;
  void clear_output_feature();
  const std::string& output_feature() const;
  void set_output_feature(const std::string& value);
  void set_output_feature(std::string&& value);
  void set_output_feature(const char* value);
  void set_output_feature(const char* value, size_t size);
  std::string* mutable_output_feature();
  std::string* release_output_feature();
  void set_allocated_output_feature(std::string* output_feature);
  private:
  const std::string& _internal_output_feature() const;
  void _internal_set_output_feature(const std::string& value);
  std::string* _internal_mutable_output_feature();
  public:

  // int32 feature_size = 3;
  void clear_feature_size();
  ::PROTOBUF_NAMESPACE_ID::int32 feature_size() const;
  void set_feature_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_feature_size() const;
  void _internal_set_feature_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .perception_feature.proto.FeatureType output_feature_type = 4;
  void clear_output_feature_type();
  ::perception_feature::proto::FeatureType output_feature_type() const;
  void set_output_feature_type(::perception_feature::proto::FeatureType value);
  private:
  ::perception_feature::proto::FeatureType _internal_output_feature_type() const;
  void _internal_set_output_feature_type(::perception_feature::proto::FeatureType value);
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_features_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Transform > transform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_feature_;
  ::PROTOBUF_NAMESPACE_ID::int32 feature_size_;
  int output_feature_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class OperationList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.OperationList) */ {
 public:
  inline OperationList() : OperationList(nullptr) {}
  virtual ~OperationList();

  OperationList(const OperationList& from);
  OperationList(OperationList&& from) noexcept
    : OperationList() {
    *this = ::std::move(from);
  }

  inline OperationList& operator=(const OperationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationList& operator=(OperationList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationList* internal_default_instance() {
    return reinterpret_cast<const OperationList*>(
               &_OperationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OperationList& a, OperationList& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationList* New() const final {
    return CreateMaybeMessage<OperationList>(nullptr);
  }

  OperationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationList& from);
  void MergeFrom(const OperationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.OperationList";
  }
  protected:
  explicit OperationList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 3,
    kVersionFieldNumber = 1,
    kOutputFormatFieldNumber = 2,
  };
  // repeated .perception_feature.proto.Operation operation = 3;
  int operation_size() const;
  private:
  int _internal_operation_size() const;
  public:
  void clear_operation();
  ::perception_feature::proto::Operation* mutable_operation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Operation >*
      mutable_operation();
  private:
  const ::perception_feature::proto::Operation& _internal_operation(int index) const;
  ::perception_feature::proto::Operation* _internal_add_operation();
  public:
  const ::perception_feature::proto::Operation& operation(int index) const;
  ::perception_feature::proto::Operation* add_operation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Operation >&
      operation() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .perception_feature.proto.OutputFormat output_format = 2;
  void clear_output_format();
  ::perception_feature::proto::OutputFormat output_format() const;
  void set_output_format(::perception_feature::proto::OutputFormat value);
  private:
  ::perception_feature::proto::OutputFormat _internal_output_format() const;
  void _internal_set_output_format(::perception_feature::proto::OutputFormat value);
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.OperationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Operation > operation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  int output_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Features

// map<string, .perception_feature.proto.Record> feature_map = 1;
inline int Features::_internal_feature_map_size() const {
  return feature_map_.size();
}
inline int Features::feature_map_size() const {
  return _internal_feature_map_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perception_feature::proto::Record >&
Features::_internal_feature_map() const {
  return feature_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perception_feature::proto::Record >&
Features::feature_map() const {
  // @@protoc_insertion_point(field_map:perception_feature.proto.Features.feature_map)
  return _internal_feature_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perception_feature::proto::Record >*
Features::_internal_mutable_feature_map() {
  return feature_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perception_feature::proto::Record >*
Features::mutable_feature_map() {
  // @@protoc_insertion_point(field_mutable_map:perception_feature.proto.Features.feature_map)
  return _internal_mutable_feature_map();
}

// -------------------------------------------------------------------

// Transform

// string formula = 1;
inline void Transform::clear_formula() {
  formula_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transform::formula() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Transform.formula)
  return _internal_formula();
}
inline void Transform::set_formula(const std::string& value) {
  _internal_set_formula(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.Transform.formula)
}
inline std::string* Transform::mutable_formula() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Transform.formula)
  return _internal_mutable_formula();
}
inline const std::string& Transform::_internal_formula() const {
  return formula_.Get();
}
inline void Transform::_internal_set_formula(const std::string& value) {
  
  formula_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transform::set_formula(std::string&& value) {
  
  formula_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.Transform.formula)
}
inline void Transform::set_formula(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formula_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.Transform.formula)
}
inline void Transform::set_formula(const char* value,
    size_t size) {
  
  formula_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.Transform.formula)
}
inline std::string* Transform::_internal_mutable_formula() {
  
  return formula_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transform::release_formula() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Transform.formula)
  return formula_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transform::set_allocated_formula(std::string* formula) {
  if (formula != nullptr) {
    
  } else {
    
  }
  formula_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formula,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.Transform.formula)
}

// repeated .perception_feature.proto.RecordEntry params = 2;
inline int Transform::_internal_params_size() const {
  return params_.size();
}
inline int Transform::params_size() const {
  return _internal_params_size();
}
inline ::perception_feature::proto::RecordEntry* Transform::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Transform.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::RecordEntry >*
Transform::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.Transform.params)
  return &params_;
}
inline const ::perception_feature::proto::RecordEntry& Transform::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::perception_feature::proto::RecordEntry& Transform::params(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Transform.params)
  return _internal_params(index);
}
inline ::perception_feature::proto::RecordEntry* Transform::_internal_add_params() {
  return params_.Add();
}
inline ::perception_feature::proto::RecordEntry* Transform::add_params() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.Transform.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::RecordEntry >&
Transform::params() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.Transform.params)
  return params_;
}

// -------------------------------------------------------------------

// Operation

// repeated string input_features = 1;
inline int Operation::_internal_input_features_size() const {
  return input_features_.size();
}
inline int Operation::input_features_size() const {
  return _internal_input_features_size();
}
inline void Operation::clear_input_features() {
  input_features_.Clear();
}
inline std::string* Operation::add_input_features() {
  // @@protoc_insertion_point(field_add_mutable:perception_feature.proto.Operation.input_features)
  return _internal_add_input_features();
}
inline const std::string& Operation::_internal_input_features(int index) const {
  return input_features_.Get(index);
}
inline const std::string& Operation::input_features(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Operation.input_features)
  return _internal_input_features(index);
}
inline std::string* Operation::mutable_input_features(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Operation.input_features)
  return input_features_.Mutable(index);
}
inline void Operation::set_input_features(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perception_feature.proto.Operation.input_features)
  input_features_.Mutable(index)->assign(value);
}
inline void Operation::set_input_features(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perception_feature.proto.Operation.input_features)
  input_features_.Mutable(index)->assign(std::move(value));
}
inline void Operation::set_input_features(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.Operation.input_features)
}
inline void Operation::set_input_features(int index, const char* value, size_t size) {
  input_features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.Operation.input_features)
}
inline std::string* Operation::_internal_add_input_features() {
  return input_features_.Add();
}
inline void Operation::add_input_features(const std::string& value) {
  input_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perception_feature.proto.Operation.input_features)
}
inline void Operation::add_input_features(std::string&& value) {
  input_features_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perception_feature.proto.Operation.input_features)
}
inline void Operation::add_input_features(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perception_feature.proto.Operation.input_features)
}
inline void Operation::add_input_features(const char* value, size_t size) {
  input_features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perception_feature.proto.Operation.input_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Operation::input_features() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.Operation.input_features)
  return input_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Operation::mutable_input_features() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.Operation.input_features)
  return &input_features_;
}

// string output_feature = 2;
inline void Operation::clear_output_feature() {
  output_feature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Operation::output_feature() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Operation.output_feature)
  return _internal_output_feature();
}
inline void Operation::set_output_feature(const std::string& value) {
  _internal_set_output_feature(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.Operation.output_feature)
}
inline std::string* Operation::mutable_output_feature() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Operation.output_feature)
  return _internal_mutable_output_feature();
}
inline const std::string& Operation::_internal_output_feature() const {
  return output_feature_.Get();
}
inline void Operation::_internal_set_output_feature(const std::string& value) {
  
  output_feature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operation::set_output_feature(std::string&& value) {
  
  output_feature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.Operation.output_feature)
}
inline void Operation::set_output_feature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_feature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.Operation.output_feature)
}
inline void Operation::set_output_feature(const char* value,
    size_t size) {
  
  output_feature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.Operation.output_feature)
}
inline std::string* Operation::_internal_mutable_output_feature() {
  
  return output_feature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operation::release_output_feature() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.Operation.output_feature)
  return output_feature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_output_feature(std::string* output_feature) {
  if (output_feature != nullptr) {
    
  } else {
    
  }
  output_feature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_feature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.Operation.output_feature)
}

// int32 feature_size = 3;
inline void Operation::clear_feature_size() {
  feature_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::_internal_feature_size() const {
  return feature_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::feature_size() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Operation.feature_size)
  return _internal_feature_size();
}
inline void Operation::_internal_set_feature_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  feature_size_ = value;
}
inline void Operation::set_feature_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_feature_size(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.Operation.feature_size)
}

// .perception_feature.proto.FeatureType output_feature_type = 4;
inline void Operation::clear_output_feature_type() {
  output_feature_type_ = 0;
}
inline ::perception_feature::proto::FeatureType Operation::_internal_output_feature_type() const {
  return static_cast< ::perception_feature::proto::FeatureType >(output_feature_type_);
}
inline ::perception_feature::proto::FeatureType Operation::output_feature_type() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Operation.output_feature_type)
  return _internal_output_feature_type();
}
inline void Operation::_internal_set_output_feature_type(::perception_feature::proto::FeatureType value) {
  
  output_feature_type_ = value;
}
inline void Operation::set_output_feature_type(::perception_feature::proto::FeatureType value) {
  _internal_set_output_feature_type(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.Operation.output_feature_type)
}

// repeated .perception_feature.proto.Transform transform = 5;
inline int Operation::_internal_transform_size() const {
  return transform_.size();
}
inline int Operation::transform_size() const {
  return _internal_transform_size();
}
inline void Operation::clear_transform() {
  transform_.Clear();
}
inline ::perception_feature::proto::Transform* Operation::mutable_transform(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.Operation.transform)
  return transform_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Transform >*
Operation::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.Operation.transform)
  return &transform_;
}
inline const ::perception_feature::proto::Transform& Operation::_internal_transform(int index) const {
  return transform_.Get(index);
}
inline const ::perception_feature::proto::Transform& Operation::transform(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.Operation.transform)
  return _internal_transform(index);
}
inline ::perception_feature::proto::Transform* Operation::_internal_add_transform() {
  return transform_.Add();
}
inline ::perception_feature::proto::Transform* Operation::add_transform() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.Operation.transform)
  return _internal_add_transform();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Transform >&
Operation::transform() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.Operation.transform)
  return transform_;
}

// -------------------------------------------------------------------

// OperationList

// string version = 1;
inline void OperationList::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OperationList::version() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.OperationList.version)
  return _internal_version();
}
inline void OperationList::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.OperationList.version)
}
inline std::string* OperationList::mutable_version() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.OperationList.version)
  return _internal_mutable_version();
}
inline const std::string& OperationList::_internal_version() const {
  return version_.Get();
}
inline void OperationList::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperationList::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.OperationList.version)
}
inline void OperationList::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.OperationList.version)
}
inline void OperationList::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.OperationList.version)
}
inline std::string* OperationList::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperationList::release_version() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.OperationList.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperationList::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.OperationList.version)
}

// .perception_feature.proto.OutputFormat output_format = 2;
inline void OperationList::clear_output_format() {
  output_format_ = 0;
}
inline ::perception_feature::proto::OutputFormat OperationList::_internal_output_format() const {
  return static_cast< ::perception_feature::proto::OutputFormat >(output_format_);
}
inline ::perception_feature::proto::OutputFormat OperationList::output_format() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.OperationList.output_format)
  return _internal_output_format();
}
inline void OperationList::_internal_set_output_format(::perception_feature::proto::OutputFormat value) {
  
  output_format_ = value;
}
inline void OperationList::set_output_format(::perception_feature::proto::OutputFormat value) {
  _internal_set_output_format(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.OperationList.output_format)
}

// repeated .perception_feature.proto.Operation operation = 3;
inline int OperationList::_internal_operation_size() const {
  return operation_.size();
}
inline int OperationList::operation_size() const {
  return _internal_operation_size();
}
inline void OperationList::clear_operation() {
  operation_.Clear();
}
inline ::perception_feature::proto::Operation* OperationList::mutable_operation(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.OperationList.operation)
  return operation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Operation >*
OperationList::mutable_operation() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.OperationList.operation)
  return &operation_;
}
inline const ::perception_feature::proto::Operation& OperationList::_internal_operation(int index) const {
  return operation_.Get(index);
}
inline const ::perception_feature::proto::Operation& OperationList::operation(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.OperationList.operation)
  return _internal_operation(index);
}
inline ::perception_feature::proto::Operation* OperationList::_internal_add_operation() {
  return operation_.Add();
}
inline ::perception_feature::proto::Operation* OperationList::add_operation() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.OperationList.operation)
  return _internal_add_operation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::Operation >&
OperationList::operation() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.OperationList.operation)
  return operation_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace perception_feature

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_operations_2eproto
