// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datasource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datasource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datasource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datasource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datasource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datasource_2eproto;
namespace perception_feature {
namespace proto {
class CsvDataConfig;
class CsvDataConfigDefaultTypeInternal;
extern CsvDataConfigDefaultTypeInternal _CsvDataConfig_default_instance_;
class CsvDataConfigList;
class CsvDataConfigListDefaultTypeInternal;
extern CsvDataConfigListDefaultTypeInternal _CsvDataConfigList_default_instance_;
class DataSource;
class DataSourceDefaultTypeInternal;
extern DataSourceDefaultTypeInternal _DataSource_default_instance_;
class DataSourceList;
class DataSourceListDefaultTypeInternal;
extern DataSourceListDefaultTypeInternal _DataSourceList_default_instance_;
}  // namespace proto
}  // namespace perception_feature
PROTOBUF_NAMESPACE_OPEN
template<> ::perception_feature::proto::CsvDataConfig* Arena::CreateMaybeMessage<::perception_feature::proto::CsvDataConfig>(Arena*);
template<> ::perception_feature::proto::CsvDataConfigList* Arena::CreateMaybeMessage<::perception_feature::proto::CsvDataConfigList>(Arena*);
template<> ::perception_feature::proto::DataSource* Arena::CreateMaybeMessage<::perception_feature::proto::DataSource>(Arena*);
template<> ::perception_feature::proto::DataSourceList* Arena::CreateMaybeMessage<::perception_feature::proto::DataSourceList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception_feature {
namespace proto {

enum DataSourceType : int {
  DT_RESERVED = 0,
  CSV_DATA = 1,
  DataSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataSourceType_IsValid(int value);
constexpr DataSourceType DataSourceType_MIN = DT_RESERVED;
constexpr DataSourceType DataSourceType_MAX = CSV_DATA;
constexpr int DataSourceType_ARRAYSIZE = DataSourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataSourceType_descriptor();
template<typename T>
inline const std::string& DataSourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataSourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataSourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataSourceType_descriptor(), enum_t_value);
}
inline bool DataSourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataSourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataSourceType>(
    DataSourceType_descriptor(), name, value);
}
enum FeatureDataType : int {
  FT_RESERVED = 0,
  STRING_TYPE = 1,
  INTEGER_TYPE = 2,
  REAL_TYPE = 3,
  FeatureDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FeatureDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FeatureDataType_IsValid(int value);
constexpr FeatureDataType FeatureDataType_MIN = FT_RESERVED;
constexpr FeatureDataType FeatureDataType_MAX = REAL_TYPE;
constexpr int FeatureDataType_ARRAYSIZE = FeatureDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeatureDataType_descriptor();
template<typename T>
inline const std::string& FeatureDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeatureDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeatureDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FeatureDataType_descriptor(), enum_t_value);
}
inline bool FeatureDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeatureDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FeatureDataType>(
    FeatureDataType_descriptor(), name, value);
}
// ===================================================================

class DataSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.DataSource) */ {
 public:
  inline DataSource() : DataSource(nullptr) {}
  virtual ~DataSource();

  DataSource(const DataSource& from);
  DataSource(DataSource&& from) noexcept
    : DataSource() {
    *this = ::std::move(from);
  }

  inline DataSource& operator=(const DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSource& operator=(DataSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSource* internal_default_instance() {
    return reinterpret_cast<const DataSource*>(
               &_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataSource& a, DataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSource* New() const final {
    return CreateMaybeMessage<DataSource>(nullptr);
  }

  DataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataSource& from);
  void MergeFrom(const DataSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.DataSource";
  }
  protected:
  explicit DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datasource_2eproto);
    return ::descriptor_table_datasource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBizNameFieldNumber = 2,
    kDataConfFieldNumber = 3,
    kDataTypeFieldNumber = 1,
  };
  // string biz_name = 2;
  void clear_biz_name();
  const std::string& biz_name() const;
  void set_biz_name(const std::string& value);
  void set_biz_name(std::string&& value);
  void set_biz_name(const char* value);
  void set_biz_name(const char* value, size_t size);
  std::string* mutable_biz_name();
  std::string* release_biz_name();
  void set_allocated_biz_name(std::string* biz_name);
  private:
  const std::string& _internal_biz_name() const;
  void _internal_set_biz_name(const std::string& value);
  std::string* _internal_mutable_biz_name();
  public:

  // string data_conf = 3;
  void clear_data_conf();
  const std::string& data_conf() const;
  void set_data_conf(const std::string& value);
  void set_data_conf(std::string&& value);
  void set_data_conf(const char* value);
  void set_data_conf(const char* value, size_t size);
  std::string* mutable_data_conf();
  std::string* release_data_conf();
  void set_allocated_data_conf(std::string* data_conf);
  private:
  const std::string& _internal_data_conf() const;
  void _internal_set_data_conf(const std::string& value);
  std::string* _internal_mutable_data_conf();
  public:

  // .perception_feature.proto.DataSourceType data_type = 1;
  void clear_data_type();
  ::perception_feature::proto::DataSourceType data_type() const;
  void set_data_type(::perception_feature::proto::DataSourceType value);
  private:
  ::perception_feature::proto::DataSourceType _internal_data_type() const;
  void _internal_set_data_type(::perception_feature::proto::DataSourceType value);
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.DataSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_conf_;
  int data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datasource_2eproto;
};
// -------------------------------------------------------------------

class DataSourceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.DataSourceList) */ {
 public:
  inline DataSourceList() : DataSourceList(nullptr) {}
  virtual ~DataSourceList();

  DataSourceList(const DataSourceList& from);
  DataSourceList(DataSourceList&& from) noexcept
    : DataSourceList() {
    *this = ::std::move(from);
  }

  inline DataSourceList& operator=(const DataSourceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceList& operator=(DataSourceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataSourceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSourceList* internal_default_instance() {
    return reinterpret_cast<const DataSourceList*>(
               &_DataSourceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataSourceList& a, DataSourceList& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSourceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSourceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSourceList* New() const final {
    return CreateMaybeMessage<DataSourceList>(nullptr);
  }

  DataSourceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSourceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataSourceList& from);
  void MergeFrom(const DataSourceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSourceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.DataSourceList";
  }
  protected:
  explicit DataSourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datasource_2eproto);
    return ::descriptor_table_datasource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceFieldNumber = 3,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated .perception_feature.proto.DataSource data_source = 3;
  int data_source_size() const;
  private:
  int _internal_data_source_size() const;
  public:
  void clear_data_source();
  ::perception_feature::proto::DataSource* mutable_data_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::DataSource >*
      mutable_data_source();
  private:
  const ::perception_feature::proto::DataSource& _internal_data_source(int index) const;
  ::perception_feature::proto::DataSource* _internal_add_data_source();
  public:
  const ::perception_feature::proto::DataSource& data_source(int index) const;
  ::perception_feature::proto::DataSource* add_data_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::DataSource >&
      data_source() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.DataSourceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::DataSource > data_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datasource_2eproto;
};
// -------------------------------------------------------------------

class CsvDataConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.CsvDataConfig) */ {
 public:
  inline CsvDataConfig() : CsvDataConfig(nullptr) {}
  virtual ~CsvDataConfig();

  CsvDataConfig(const CsvDataConfig& from);
  CsvDataConfig(CsvDataConfig&& from) noexcept
    : CsvDataConfig() {
    *this = ::std::move(from);
  }

  inline CsvDataConfig& operator=(const CsvDataConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsvDataConfig& operator=(CsvDataConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsvDataConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsvDataConfig* internal_default_instance() {
    return reinterpret_cast<const CsvDataConfig*>(
               &_CsvDataConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CsvDataConfig& a, CsvDataConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CsvDataConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsvDataConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsvDataConfig* New() const final {
    return CreateMaybeMessage<CsvDataConfig>(nullptr);
  }

  CsvDataConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsvDataConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsvDataConfig& from);
  void MergeFrom(const CsvDataConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsvDataConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.CsvDataConfig";
  }
  protected:
  explicit CsvDataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datasource_2eproto);
    return ::descriptor_table_datasource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureNameFieldNumber = 2,
    kColumnFieldNumber = 1,
    kFeatureDataTypeFieldNumber = 3,
  };
  // string feature_name = 2;
  void clear_feature_name();
  const std::string& feature_name() const;
  void set_feature_name(const std::string& value);
  void set_feature_name(std::string&& value);
  void set_feature_name(const char* value);
  void set_feature_name(const char* value, size_t size);
  std::string* mutable_feature_name();
  std::string* release_feature_name();
  void set_allocated_feature_name(std::string* feature_name);
  private:
  const std::string& _internal_feature_name() const;
  void _internal_set_feature_name(const std::string& value);
  std::string* _internal_mutable_feature_name();
  public:

  // int32 column = 1;
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::int32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .perception_feature.proto.FeatureDataType feature_data_type = 3;
  void clear_feature_data_type();
  ::perception_feature::proto::FeatureDataType feature_data_type() const;
  void set_feature_data_type(::perception_feature::proto::FeatureDataType value);
  private:
  ::perception_feature::proto::FeatureDataType _internal_feature_data_type() const;
  void _internal_set_feature_data_type(::perception_feature::proto::FeatureDataType value);
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.CsvDataConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 column_;
  int feature_data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datasource_2eproto;
};
// -------------------------------------------------------------------

class CsvDataConfigList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception_feature.proto.CsvDataConfigList) */ {
 public:
  inline CsvDataConfigList() : CsvDataConfigList(nullptr) {}
  virtual ~CsvDataConfigList();

  CsvDataConfigList(const CsvDataConfigList& from);
  CsvDataConfigList(CsvDataConfigList&& from) noexcept
    : CsvDataConfigList() {
    *this = ::std::move(from);
  }

  inline CsvDataConfigList& operator=(const CsvDataConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsvDataConfigList& operator=(CsvDataConfigList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsvDataConfigList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsvDataConfigList* internal_default_instance() {
    return reinterpret_cast<const CsvDataConfigList*>(
               &_CsvDataConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CsvDataConfigList& a, CsvDataConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(CsvDataConfigList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsvDataConfigList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsvDataConfigList* New() const final {
    return CreateMaybeMessage<CsvDataConfigList>(nullptr);
  }

  CsvDataConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsvDataConfigList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsvDataConfigList& from);
  void MergeFrom(const CsvDataConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsvDataConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception_feature.proto.CsvDataConfigList";
  }
  protected:
  explicit CsvDataConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datasource_2eproto);
    return ::descriptor_table_datasource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 6,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kDataPathFieldNumber = 3,
    kSeparatorFieldNumber = 4,
    kFileExtensionFieldNumber = 5,
  };
  // repeated .perception_feature.proto.CsvDataConfig config_list = 6;
  int config_list_size() const;
  private:
  int _internal_config_list_size() const;
  public:
  void clear_config_list();
  ::perception_feature::proto::CsvDataConfig* mutable_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::CsvDataConfig >*
      mutable_config_list();
  private:
  const ::perception_feature::proto::CsvDataConfig& _internal_config_list(int index) const;
  ::perception_feature::proto::CsvDataConfig* _internal_add_config_list();
  public:
  const ::perception_feature::proto::CsvDataConfig& config_list(int index) const;
  ::perception_feature::proto::CsvDataConfig* add_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::CsvDataConfig >&
      config_list() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string data_path = 3;
  void clear_data_path();
  const std::string& data_path() const;
  void set_data_path(const std::string& value);
  void set_data_path(std::string&& value);
  void set_data_path(const char* value);
  void set_data_path(const char* value, size_t size);
  std::string* mutable_data_path();
  std::string* release_data_path();
  void set_allocated_data_path(std::string* data_path);
  private:
  const std::string& _internal_data_path() const;
  void _internal_set_data_path(const std::string& value);
  std::string* _internal_mutable_data_path();
  public:

  // string separator = 4;
  void clear_separator();
  const std::string& separator() const;
  void set_separator(const std::string& value);
  void set_separator(std::string&& value);
  void set_separator(const char* value);
  void set_separator(const char* value, size_t size);
  std::string* mutable_separator();
  std::string* release_separator();
  void set_allocated_separator(std::string* separator);
  private:
  const std::string& _internal_separator() const;
  void _internal_set_separator(const std::string& value);
  std::string* _internal_mutable_separator();
  public:

  // string file_extension = 5;
  void clear_file_extension();
  const std::string& file_extension() const;
  void set_file_extension(const std::string& value);
  void set_file_extension(std::string&& value);
  void set_file_extension(const char* value);
  void set_file_extension(const char* value, size_t size);
  std::string* mutable_file_extension();
  std::string* release_file_extension();
  void set_allocated_file_extension(std::string* file_extension);
  private:
  const std::string& _internal_file_extension() const;
  void _internal_set_file_extension(const std::string& value);
  std::string* _internal_mutable_file_extension();
  public:

  // @@protoc_insertion_point(class_scope:perception_feature.proto.CsvDataConfigList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::CsvDataConfig > config_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr separator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datasource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataSource

// .perception_feature.proto.DataSourceType data_type = 1;
inline void DataSource::clear_data_type() {
  data_type_ = 0;
}
inline ::perception_feature::proto::DataSourceType DataSource::_internal_data_type() const {
  return static_cast< ::perception_feature::proto::DataSourceType >(data_type_);
}
inline ::perception_feature::proto::DataSourceType DataSource::data_type() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DataSource.data_type)
  return _internal_data_type();
}
inline void DataSource::_internal_set_data_type(::perception_feature::proto::DataSourceType value) {
  
  data_type_ = value;
}
inline void DataSource::set_data_type(::perception_feature::proto::DataSourceType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.DataSource.data_type)
}

// string biz_name = 2;
inline void DataSource::clear_biz_name() {
  biz_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataSource::biz_name() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DataSource.biz_name)
  return _internal_biz_name();
}
inline void DataSource::set_biz_name(const std::string& value) {
  _internal_set_biz_name(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.DataSource.biz_name)
}
inline std::string* DataSource::mutable_biz_name() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.DataSource.biz_name)
  return _internal_mutable_biz_name();
}
inline const std::string& DataSource::_internal_biz_name() const {
  return biz_name_.Get();
}
inline void DataSource::_internal_set_biz_name(const std::string& value) {
  
  biz_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataSource::set_biz_name(std::string&& value) {
  
  biz_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.DataSource.biz_name)
}
inline void DataSource::set_biz_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  biz_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.DataSource.biz_name)
}
inline void DataSource::set_biz_name(const char* value,
    size_t size) {
  
  biz_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.DataSource.biz_name)
}
inline std::string* DataSource::_internal_mutable_biz_name() {
  
  return biz_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataSource::release_biz_name() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.DataSource.biz_name)
  return biz_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSource::set_allocated_biz_name(std::string* biz_name) {
  if (biz_name != nullptr) {
    
  } else {
    
  }
  biz_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.DataSource.biz_name)
}

// string data_conf = 3;
inline void DataSource::clear_data_conf() {
  data_conf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataSource::data_conf() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DataSource.data_conf)
  return _internal_data_conf();
}
inline void DataSource::set_data_conf(const std::string& value) {
  _internal_set_data_conf(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.DataSource.data_conf)
}
inline std::string* DataSource::mutable_data_conf() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.DataSource.data_conf)
  return _internal_mutable_data_conf();
}
inline const std::string& DataSource::_internal_data_conf() const {
  return data_conf_.Get();
}
inline void DataSource::_internal_set_data_conf(const std::string& value) {
  
  data_conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataSource::set_data_conf(std::string&& value) {
  
  data_conf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.DataSource.data_conf)
}
inline void DataSource::set_data_conf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.DataSource.data_conf)
}
inline void DataSource::set_data_conf(const char* value,
    size_t size) {
  
  data_conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.DataSource.data_conf)
}
inline std::string* DataSource::_internal_mutable_data_conf() {
  
  return data_conf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataSource::release_data_conf() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.DataSource.data_conf)
  return data_conf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSource::set_allocated_data_conf(std::string* data_conf) {
  if (data_conf != nullptr) {
    
  } else {
    
  }
  data_conf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_conf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.DataSource.data_conf)
}

// -------------------------------------------------------------------

// DataSourceList

// string version = 1;
inline void DataSourceList::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataSourceList::version() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DataSourceList.version)
  return _internal_version();
}
inline void DataSourceList::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.DataSourceList.version)
}
inline std::string* DataSourceList::mutable_version() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.DataSourceList.version)
  return _internal_mutable_version();
}
inline const std::string& DataSourceList::_internal_version() const {
  return version_.Get();
}
inline void DataSourceList::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataSourceList::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.DataSourceList.version)
}
inline void DataSourceList::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.DataSourceList.version)
}
inline void DataSourceList::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.DataSourceList.version)
}
inline std::string* DataSourceList::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataSourceList::release_version() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.DataSourceList.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceList::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.DataSourceList.version)
}

// string description = 2;
inline void DataSourceList::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataSourceList::description() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DataSourceList.description)
  return _internal_description();
}
inline void DataSourceList::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.DataSourceList.description)
}
inline std::string* DataSourceList::mutable_description() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.DataSourceList.description)
  return _internal_mutable_description();
}
inline const std::string& DataSourceList::_internal_description() const {
  return description_.Get();
}
inline void DataSourceList::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataSourceList::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.DataSourceList.description)
}
inline void DataSourceList::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.DataSourceList.description)
}
inline void DataSourceList::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.DataSourceList.description)
}
inline std::string* DataSourceList::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataSourceList::release_description() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.DataSourceList.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataSourceList::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.DataSourceList.description)
}

// repeated .perception_feature.proto.DataSource data_source = 3;
inline int DataSourceList::_internal_data_source_size() const {
  return data_source_.size();
}
inline int DataSourceList::data_source_size() const {
  return _internal_data_source_size();
}
inline void DataSourceList::clear_data_source() {
  data_source_.Clear();
}
inline ::perception_feature::proto::DataSource* DataSourceList::mutable_data_source(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.DataSourceList.data_source)
  return data_source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::DataSource >*
DataSourceList::mutable_data_source() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.DataSourceList.data_source)
  return &data_source_;
}
inline const ::perception_feature::proto::DataSource& DataSourceList::_internal_data_source(int index) const {
  return data_source_.Get(index);
}
inline const ::perception_feature::proto::DataSource& DataSourceList::data_source(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.DataSourceList.data_source)
  return _internal_data_source(index);
}
inline ::perception_feature::proto::DataSource* DataSourceList::_internal_add_data_source() {
  return data_source_.Add();
}
inline ::perception_feature::proto::DataSource* DataSourceList::add_data_source() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.DataSourceList.data_source)
  return _internal_add_data_source();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::DataSource >&
DataSourceList::data_source() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.DataSourceList.data_source)
  return data_source_;
}

// -------------------------------------------------------------------

// CsvDataConfig

// int32 column = 1;
inline void CsvDataConfig::clear_column() {
  column_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsvDataConfig::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsvDataConfig::column() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfig.column)
  return _internal_column();
}
inline void CsvDataConfig::_internal_set_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  column_ = value;
}
inline void CsvDataConfig::set_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.CsvDataConfig.column)
}

// string feature_name = 2;
inline void CsvDataConfig::clear_feature_name() {
  feature_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CsvDataConfig::feature_name() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfig.feature_name)
  return _internal_feature_name();
}
inline void CsvDataConfig::set_feature_name(const std::string& value) {
  _internal_set_feature_name(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.CsvDataConfig.feature_name)
}
inline std::string* CsvDataConfig::mutable_feature_name() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.CsvDataConfig.feature_name)
  return _internal_mutable_feature_name();
}
inline const std::string& CsvDataConfig::_internal_feature_name() const {
  return feature_name_.Get();
}
inline void CsvDataConfig::_internal_set_feature_name(const std::string& value) {
  
  feature_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CsvDataConfig::set_feature_name(std::string&& value) {
  
  feature_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.CsvDataConfig.feature_name)
}
inline void CsvDataConfig::set_feature_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  feature_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.CsvDataConfig.feature_name)
}
inline void CsvDataConfig::set_feature_name(const char* value,
    size_t size) {
  
  feature_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.CsvDataConfig.feature_name)
}
inline std::string* CsvDataConfig::_internal_mutable_feature_name() {
  
  return feature_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CsvDataConfig::release_feature_name() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.CsvDataConfig.feature_name)
  return feature_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsvDataConfig::set_allocated_feature_name(std::string* feature_name) {
  if (feature_name != nullptr) {
    
  } else {
    
  }
  feature_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.CsvDataConfig.feature_name)
}

// .perception_feature.proto.FeatureDataType feature_data_type = 3;
inline void CsvDataConfig::clear_feature_data_type() {
  feature_data_type_ = 0;
}
inline ::perception_feature::proto::FeatureDataType CsvDataConfig::_internal_feature_data_type() const {
  return static_cast< ::perception_feature::proto::FeatureDataType >(feature_data_type_);
}
inline ::perception_feature::proto::FeatureDataType CsvDataConfig::feature_data_type() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfig.feature_data_type)
  return _internal_feature_data_type();
}
inline void CsvDataConfig::_internal_set_feature_data_type(::perception_feature::proto::FeatureDataType value) {
  
  feature_data_type_ = value;
}
inline void CsvDataConfig::set_feature_data_type(::perception_feature::proto::FeatureDataType value) {
  _internal_set_feature_data_type(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.CsvDataConfig.feature_data_type)
}

// -------------------------------------------------------------------

// CsvDataConfigList

// string version = 1;
inline void CsvDataConfigList::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CsvDataConfigList::version() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfigList.version)
  return _internal_version();
}
inline void CsvDataConfigList::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.CsvDataConfigList.version)
}
inline std::string* CsvDataConfigList::mutable_version() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.CsvDataConfigList.version)
  return _internal_mutable_version();
}
inline const std::string& CsvDataConfigList::_internal_version() const {
  return version_.Get();
}
inline void CsvDataConfigList::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CsvDataConfigList::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.CsvDataConfigList.version)
}
inline void CsvDataConfigList::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.CsvDataConfigList.version)
}
inline void CsvDataConfigList::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.CsvDataConfigList.version)
}
inline std::string* CsvDataConfigList::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CsvDataConfigList::release_version() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.CsvDataConfigList.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsvDataConfigList::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.CsvDataConfigList.version)
}

// string description = 2;
inline void CsvDataConfigList::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CsvDataConfigList::description() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfigList.description)
  return _internal_description();
}
inline void CsvDataConfigList::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.CsvDataConfigList.description)
}
inline std::string* CsvDataConfigList::mutable_description() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.CsvDataConfigList.description)
  return _internal_mutable_description();
}
inline const std::string& CsvDataConfigList::_internal_description() const {
  return description_.Get();
}
inline void CsvDataConfigList::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CsvDataConfigList::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.CsvDataConfigList.description)
}
inline void CsvDataConfigList::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.CsvDataConfigList.description)
}
inline void CsvDataConfigList::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.CsvDataConfigList.description)
}
inline std::string* CsvDataConfigList::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CsvDataConfigList::release_description() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.CsvDataConfigList.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsvDataConfigList::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.CsvDataConfigList.description)
}

// string data_path = 3;
inline void CsvDataConfigList::clear_data_path() {
  data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CsvDataConfigList::data_path() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfigList.data_path)
  return _internal_data_path();
}
inline void CsvDataConfigList::set_data_path(const std::string& value) {
  _internal_set_data_path(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.CsvDataConfigList.data_path)
}
inline std::string* CsvDataConfigList::mutable_data_path() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.CsvDataConfigList.data_path)
  return _internal_mutable_data_path();
}
inline const std::string& CsvDataConfigList::_internal_data_path() const {
  return data_path_.Get();
}
inline void CsvDataConfigList::_internal_set_data_path(const std::string& value) {
  
  data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CsvDataConfigList::set_data_path(std::string&& value) {
  
  data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.CsvDataConfigList.data_path)
}
inline void CsvDataConfigList::set_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.CsvDataConfigList.data_path)
}
inline void CsvDataConfigList::set_data_path(const char* value,
    size_t size) {
  
  data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.CsvDataConfigList.data_path)
}
inline std::string* CsvDataConfigList::_internal_mutable_data_path() {
  
  return data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CsvDataConfigList::release_data_path() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.CsvDataConfigList.data_path)
  return data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsvDataConfigList::set_allocated_data_path(std::string* data_path) {
  if (data_path != nullptr) {
    
  } else {
    
  }
  data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.CsvDataConfigList.data_path)
}

// string separator = 4;
inline void CsvDataConfigList::clear_separator() {
  separator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CsvDataConfigList::separator() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfigList.separator)
  return _internal_separator();
}
inline void CsvDataConfigList::set_separator(const std::string& value) {
  _internal_set_separator(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.CsvDataConfigList.separator)
}
inline std::string* CsvDataConfigList::mutable_separator() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.CsvDataConfigList.separator)
  return _internal_mutable_separator();
}
inline const std::string& CsvDataConfigList::_internal_separator() const {
  return separator_.Get();
}
inline void CsvDataConfigList::_internal_set_separator(const std::string& value) {
  
  separator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CsvDataConfigList::set_separator(std::string&& value) {
  
  separator_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.CsvDataConfigList.separator)
}
inline void CsvDataConfigList::set_separator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  separator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.CsvDataConfigList.separator)
}
inline void CsvDataConfigList::set_separator(const char* value,
    size_t size) {
  
  separator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.CsvDataConfigList.separator)
}
inline std::string* CsvDataConfigList::_internal_mutable_separator() {
  
  return separator_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CsvDataConfigList::release_separator() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.CsvDataConfigList.separator)
  return separator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsvDataConfigList::set_allocated_separator(std::string* separator) {
  if (separator != nullptr) {
    
  } else {
    
  }
  separator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), separator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.CsvDataConfigList.separator)
}

// string file_extension = 5;
inline void CsvDataConfigList::clear_file_extension() {
  file_extension_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CsvDataConfigList::file_extension() const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfigList.file_extension)
  return _internal_file_extension();
}
inline void CsvDataConfigList::set_file_extension(const std::string& value) {
  _internal_set_file_extension(value);
  // @@protoc_insertion_point(field_set:perception_feature.proto.CsvDataConfigList.file_extension)
}
inline std::string* CsvDataConfigList::mutable_file_extension() {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.CsvDataConfigList.file_extension)
  return _internal_mutable_file_extension();
}
inline const std::string& CsvDataConfigList::_internal_file_extension() const {
  return file_extension_.Get();
}
inline void CsvDataConfigList::_internal_set_file_extension(const std::string& value) {
  
  file_extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CsvDataConfigList::set_file_extension(std::string&& value) {
  
  file_extension_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perception_feature.proto.CsvDataConfigList.file_extension)
}
inline void CsvDataConfigList::set_file_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perception_feature.proto.CsvDataConfigList.file_extension)
}
inline void CsvDataConfigList::set_file_extension(const char* value,
    size_t size) {
  
  file_extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perception_feature.proto.CsvDataConfigList.file_extension)
}
inline std::string* CsvDataConfigList::_internal_mutable_file_extension() {
  
  return file_extension_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CsvDataConfigList::release_file_extension() {
  // @@protoc_insertion_point(field_release:perception_feature.proto.CsvDataConfigList.file_extension)
  return file_extension_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsvDataConfigList::set_allocated_file_extension(std::string* file_extension) {
  if (file_extension != nullptr) {
    
  } else {
    
  }
  file_extension_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_extension,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perception_feature.proto.CsvDataConfigList.file_extension)
}

// repeated .perception_feature.proto.CsvDataConfig config_list = 6;
inline int CsvDataConfigList::_internal_config_list_size() const {
  return config_list_.size();
}
inline int CsvDataConfigList::config_list_size() const {
  return _internal_config_list_size();
}
inline void CsvDataConfigList::clear_config_list() {
  config_list_.Clear();
}
inline ::perception_feature::proto::CsvDataConfig* CsvDataConfigList::mutable_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception_feature.proto.CsvDataConfigList.config_list)
  return config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::CsvDataConfig >*
CsvDataConfigList::mutable_config_list() {
  // @@protoc_insertion_point(field_mutable_list:perception_feature.proto.CsvDataConfigList.config_list)
  return &config_list_;
}
inline const ::perception_feature::proto::CsvDataConfig& CsvDataConfigList::_internal_config_list(int index) const {
  return config_list_.Get(index);
}
inline const ::perception_feature::proto::CsvDataConfig& CsvDataConfigList::config_list(int index) const {
  // @@protoc_insertion_point(field_get:perception_feature.proto.CsvDataConfigList.config_list)
  return _internal_config_list(index);
}
inline ::perception_feature::proto::CsvDataConfig* CsvDataConfigList::_internal_add_config_list() {
  return config_list_.Add();
}
inline ::perception_feature::proto::CsvDataConfig* CsvDataConfigList::add_config_list() {
  // @@protoc_insertion_point(field_add:perception_feature.proto.CsvDataConfigList.config_list)
  return _internal_add_config_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception_feature::proto::CsvDataConfig >&
CsvDataConfigList::config_list() const {
  // @@protoc_insertion_point(field_list:perception_feature.proto.CsvDataConfigList.config_list)
  return config_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace perception_feature

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception_feature::proto::DataSourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception_feature::proto::DataSourceType>() {
  return ::perception_feature::proto::DataSourceType_descriptor();
}
template <> struct is_proto_enum< ::perception_feature::proto::FeatureDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception_feature::proto::FeatureDataType>() {
  return ::perception_feature::proto::FeatureDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datasource_2eproto
